
stm32f411_FDCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006310  08006310  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006310  08006310  00016310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006318  08006318  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800631c  0800631c  0001631c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000068  08006388  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08006388  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f2f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e1  00000000  00000000  0003a00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117a  00000000  00000000  0003ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199ca  00000000  00000000  0003fde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7f8  00000000  00000000  000597ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009804d  00000000  00000000  00074fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006820  00000000  00000000  0010cff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00113814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060b4 	.word	0x080060b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080060b4 	.word	0x080060b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
 8000596:	4b83      	ldr	r3, [pc, #524]	; (80007a4 <MX_GPIO_Init+0x228>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a82      	ldr	r2, [pc, #520]	; (80007a4 <MX_GPIO_Init+0x228>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b80      	ldr	r3, [pc, #512]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	4b7c      	ldr	r3, [pc, #496]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a7b      	ldr	r2, [pc, #492]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b79      	ldr	r3, [pc, #484]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b75      	ldr	r3, [pc, #468]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a74      	ldr	r2, [pc, #464]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b72      	ldr	r3, [pc, #456]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b6e      	ldr	r3, [pc, #440]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a6d      	ldr	r2, [pc, #436]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b6b      	ldr	r3, [pc, #428]	; (80007a4 <MX_GPIO_Init+0x228>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b67      	ldr	r3, [pc, #412]	; (80007a4 <MX_GPIO_Init+0x228>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a66      	ldr	r2, [pc, #408]	; (80007a4 <MX_GPIO_Init+0x228>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b64      	ldr	r3, [pc, #400]	; (80007a4 <MX_GPIO_Init+0x228>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b60      	ldr	r3, [pc, #384]	; (80007a4 <MX_GPIO_Init+0x228>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a5f      	ldr	r2, [pc, #380]	; (80007a4 <MX_GPIO_Init+0x228>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b5d      	ldr	r3, [pc, #372]	; (80007a4 <MX_GPIO_Init+0x228>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	485a      	ldr	r0, [pc, #360]	; (80007a8 <MX_GPIO_Init+0x22c>)
 8000640:	f001 f9c4 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2101      	movs	r1, #1
 8000648:	4858      	ldr	r0, [pc, #352]	; (80007ac <MX_GPIO_Init+0x230>)
 800064a:	f001 f9bf 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800064e:	2200      	movs	r2, #0
 8000650:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000654:	4856      	ldr	r0, [pc, #344]	; (80007b0 <MX_GPIO_Init+0x234>)
 8000656:	f001 f9b9 	bl	80019cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800065a:	2304      	movs	r3, #4
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	484e      	ldr	r0, [pc, #312]	; (80007a8 <MX_GPIO_Init+0x22c>)
 800066e:	f001 f829 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000672:	2308      	movs	r3, #8
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4847      	ldr	r0, [pc, #284]	; (80007a8 <MX_GPIO_Init+0x22c>)
 800068a:	f001 f81b 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT2_Pin|MEMS_INT2_Pin;
 800068e:	2322      	movs	r3, #34	; 0x22
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000692:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4841      	ldr	r0, [pc, #260]	; (80007a8 <MX_GPIO_Init+0x22c>)
 80006a4:	f001 f80e 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	483b      	ldr	r0, [pc, #236]	; (80007ac <MX_GPIO_Init+0x230>)
 80006c0:	f001 f800 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006c8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	4836      	ldr	r0, [pc, #216]	; (80007b4 <MX_GPIO_Init+0x238>)
 80006da:	f000 fff3 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006de:	2310      	movs	r3, #16
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	482e      	ldr	r0, [pc, #184]	; (80007ac <MX_GPIO_Init+0x230>)
 80006f4:	f000 ffe6 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4827      	ldr	r0, [pc, #156]	; (80007b0 <MX_GPIO_Init+0x234>)
 8000712:	f000 ffd7 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000716:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800071a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000728:	2306      	movs	r3, #6
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	481e      	ldr	r0, [pc, #120]	; (80007ac <MX_GPIO_Init+0x230>)
 8000734:	f000 ffc6 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4819      	ldr	r0, [pc, #100]	; (80007b4 <MX_GPIO_Init+0x238>)
 800074e:	f000 ffb9 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000752:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000764:	230a      	movs	r3, #10
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0x238>)
 8000770:	f000 ffa8 	bl	80016c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000774:	2320      	movs	r3, #32
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <MX_GPIO_Init+0x234>)
 8000788:	f000 ff9c 	bl	80016c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2006      	movs	r0, #6
 8000792:	f000 ff3e 	bl	8001612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000796:	2006      	movs	r0, #6
 8000798:	f000 ff57 	bl	800164a <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	3730      	adds	r7, #48	; 0x30
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40020000 	.word	0x40020000

080007b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2C1_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_I2C1_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2C1_Init+0x50>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_I2C1_Init+0x58>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_I2C1_Init+0x50>)
 80007d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_I2C1_Init+0x50>)
 80007f6:	f001 f935 	bl	8001a64 <HAL_I2C_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 f9f2 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000084 	.word	0x20000084
 800080c:	40005400 	.word	0x40005400
 8000810:	000186a0 	.word	0x000186a0

08000814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a19      	ldr	r2, [pc, #100]	; (8000898 <HAL_I2C_MspInit+0x84>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d12c      	bne.n	8000890 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_I2C_MspInit+0x88>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <HAL_I2C_MspInit+0x88>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_I2C_MspInit+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000852:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000858:	2312      	movs	r3, #18
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000864:	2304      	movs	r3, #4
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <HAL_I2C_MspInit+0x8c>)
 8000870:	f000 ff28 	bl	80016c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_I2C_MspInit+0x88>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_I2C_MspInit+0x88>)
 800087e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_I2C_MspInit+0x88>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40005400 	.word	0x40005400
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400

080008a4 <MX_I2S2_Init>:

I2S_HandleTypeDef hi2s2;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <MX_I2S2_Init+0x54>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <MX_I2S2_Init+0x58>)
 80008cc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008dc:	2201      	movs	r2, #1
 80008de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_I2S2_Init+0x50>)
 80008e2:	f001 fa03 	bl	8001cec <HAL_I2S_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008ec:	f000 f97c 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000d8 	.word	0x200000d8
 80008f8:	40003800 	.word	0x40003800
 80008fc:	00017700 	.word	0x00017700

08000900 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	; 0x40
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI2)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a3a      	ldr	r2, [pc, #232]	; (8000a18 <HAL_I2S_MspInit+0x118>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d16c      	bne.n	8000a0e <HAL_I2S_MspInit+0x10e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000938:	23c8      	movs	r3, #200	; 0xc8
 800093a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 10;
 800093c:	230a      	movs	r3, #10
 800093e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4618      	mov	r0, r3
 800094a:	f002 faf3 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000954:	f000 f948 	bl	8000be8 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_I2S_MspInit+0x11c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ac:	2304      	movs	r3, #4
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80009bc:	2306      	movs	r3, #6
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c4:	4619      	mov	r1, r3
 80009c6:	4816      	ldr	r0, [pc, #88]	; (8000a20 <HAL_I2S_MspInit+0x120>)
 80009c8:	f000 fe7c 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009cc:	2308      	movs	r3, #8
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009dc:	2305      	movs	r3, #5
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e4:	4619      	mov	r1, r3
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <HAL_I2S_MspInit+0x120>)
 80009e8:	f000 fe6c 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009fe:	2305      	movs	r3, #5
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_I2S_MspInit+0x124>)
 8000a0a:	f000 fe5b 	bl	80016c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3740      	adds	r7, #64	; 0x40
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40003800 	.word	0x40003800
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020400 	.word	0x40020400

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2c:	f000 fc80 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a30:	f000 f84c 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff fda2 	bl	800057c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a38:	f7ff febe 	bl	80007b8 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a3c:	f7ff ff32 	bl	80008a4 <MX_I2S2_Init>
  MX_SPI1_Init();
 8000a40:	f000 f8d8 	bl	8000bf4 <MX_SPI1_Init>
  MX_TIM11_Init();
 8000a44:	f000 fbc2 	bl	80011cc <MX_TIM11_Init>
  MX_TIM10_Init();
 8000a48:	f000 fb9c 	bl	8001184 <MX_TIM10_Init>
  MX_TIM4_Init();
 8000a4c:	f000 fb4c 	bl	80010e8 <MX_TIM4_Init>
  MX_SPI4_Init();
 8000a50:	f000 f906 	bl	8000c60 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <main+0x8c>)
 8000a56:	f003 fb7d 	bl	8004154 <HAL_TIM_Base_Start_IT>

  HAL_SPI_Receive_IT(&hspi4, RX_Buffer, BUFFER_SIZE);
 8000a5a:	2264      	movs	r2, #100	; 0x64
 8000a5c:	4916      	ldr	r1, [pc, #88]	; (8000ab8 <main+0x90>)
 8000a5e:	4817      	ldr	r0, [pc, #92]	; (8000abc <main+0x94>)
 8000a60:	f002 fde4 	bl	800362c <HAL_SPI_Receive_IT>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_LOW);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <main+0x98>)
 8000a6c:	f000 ffae 	bl	80019cc <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  g_counter ++;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <main+0x9c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <main+0x9c>)
 8000a78:	6013      	str	r3, [r2, #0]
	  if (g_counter >= 10000) g_counter =0;
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <main+0x9c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d902      	bls.n	8000a8c <main+0x64>
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <main+0x9c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]

	  if (flag_send_frame == 1) {
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <main+0xa0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d1ed      	bne.n	8000a70 <main+0x48>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <main+0x98>)
 8000a9a:	f000 ffb0 	bl	80019fe <HAL_GPIO_TogglePin>
//		  mcp2518fd_transpond();
		  mcp2518fd_transmit();
 8000a9e:	f004 faa7 	bl	8004ff0 <mcp2518fd_transmit>
//		  mcp2518fd_receive();
		  HAL_Delay(500);
 8000aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa6:	f000 fcb5 	bl	8001414 <HAL_Delay>
		  flag_send_frame = 0;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <main+0xa0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	  g_counter ++;
 8000ab0:	e7de      	b.n	8000a70 <main+0x48>
 8000ab2:	bf00      	nop
 8000ab4:	200002d8 	.word	0x200002d8
 8000ab8:	2000012c 	.word	0x2000012c
 8000abc:	200001e8 	.word	0x200001e8
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	20000120 	.word	0x20000120
 8000ac8:	20000128 	.word	0x20000128

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	; 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 fc47 	bl	800536e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <SystemClock_Config+0xc8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <SystemClock_Config+0xc8>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <SystemClock_Config+0xc8>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <SystemClock_Config+0xcc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <SystemClock_Config+0xcc>)
 8000b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <SystemClock_Config+0xcc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b30:	2310      	movs	r3, #16
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fd6b 	bl	800262c <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b5c:	f000 f844 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 ffcd 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b88:	f000 f82e 	bl	8000be8 <Error_Handler>
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3750      	adds	r7, #80	; 0x50
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <HAL_GPIO_EXTI_Callback>:
////  }
//
//
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_0){
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d110      	bne.n	8000bce <HAL_GPIO_EXTI_Callback+0x32>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_LOW);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000bb4:	f000 ff0a 	bl	80019cc <HAL_GPIO_WritePin>
//	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	  mcp2518fd_transpond();
	  counter_btn++;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_GPIO_EXTI_Callback+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <HAL_GPIO_EXTI_Callback+0x40>)
 8000bc0:	6013      	str	r3, [r2, #0]
	  flag_send_frame = 1; //send the frame
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
	  flag_enable_btn = 1;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_GPIO_EXTI_Callback+0x48>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	20000124 	.word	0x20000124
 8000be0:	20000128 	.word	0x20000128
 8000be4:	20000129 	.word	0x20000129

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_SPI1_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c28:	2210      	movs	r2, #16
 8000c2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c40:	220a      	movs	r2, #10
 8000c42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_SPI1_Init+0x64>)
 8000c46:	f002 fac5 	bl	80031d4 <HAL_SPI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c50:	f7ff ffca 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000190 	.word	0x20000190
 8000c5c:	40013000 	.word	0x40013000

08000c60 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c66:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <MX_SPI4_Init+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c70:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c90:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c94:	2210      	movs	r2, #16
 8000c96:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000cac:	220a      	movs	r2, #10
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_SPI4_Init+0x64>)
 8000cb2:	f002 fa8f 	bl	80031d4 <HAL_SPI_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000cbc:	f7ff ff94 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001e8 	.word	0x200001e8
 8000cc8:	40013400 	.word	0x40013400

08000ccc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <HAL_SPI_MspInit+0x108>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d134      	bne.n	8000d58 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000cf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d26:	23f0      	movs	r3, #240	; 0xf0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d36:	2305      	movs	r3, #5
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4826      	ldr	r0, [pc, #152]	; (8000ddc <HAL_SPI_MspInit+0x110>)
 8000d42:	f000 fcbf 	bl	80016c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2023      	movs	r0, #35	; 0x23
 8000d4c:	f000 fc61 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d50:	2023      	movs	r0, #35	; 0x23
 8000d52:	f000 fc7a 	bl	800164a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8000d56:	e039      	b.n	8000dcc <HAL_SPI_MspInit+0x100>
  else if(spiHandle->Instance==SPI4)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <HAL_SPI_MspInit+0x114>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d134      	bne.n	8000dcc <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d88:	f043 0310 	orr.w	r3, r3, #16
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_SPI_MspInit+0x10c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d9a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000dac:	2305      	movs	r3, #5
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_SPI_MspInit+0x118>)
 8000db8:	f000 fc84 	bl	80016c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2054      	movs	r0, #84	; 0x54
 8000dc2:	f000 fc26 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000dc6:	2054      	movs	r0, #84	; 0x54
 8000dc8:	f000 fc3f 	bl	800164a <HAL_NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40013000 	.word	0x40013000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40013400 	.word	0x40013400
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <HAL_MspInit+0x4c>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e26:	2007      	movs	r0, #7
 8000e28:	f000 fbe8 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 faa6 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 fdcf 	bl	8001a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ea2:	f003 f9b9 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000290 	.word	0x20000290

08000eb0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 8000eb6:	f003 f9af 	bl	8004218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
//    if (htim == &htim11)
//    {
	if(counter_timer >= 1000) {
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec2:	d308      	bcc.n	8000ed6 <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <TIM1_TRG_COM_TIM11_IRQHandler+0x3c>)
 8000eca:	f000 fd98 	bl	80019fe <HAL_GPIO_TogglePin>
	  counter_timer = 0;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
//
//		flag_send_frame = 1 //send the frame
//	}

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ed4:	e004      	b.n	8000ee0 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>
	  counter_timer++;
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a02      	ldr	r2, [pc, #8]	; (8000ee8 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200002d8 	.word	0x200002d8
 8000ee8:	20000240 	.word	0x20000240
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM4_IRQHandler+0x10>)
 8000ef6:	f003 f98f 	bl	8004218 <HAL_TIM_IRQHandler>
//	else {
//	  counter_timer++;
//	}

  /* USER CODE END TIM4_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000248 	.word	0x20000248

08000f04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <SPI1_IRQHandler+0x10>)
 8000f0a:	f002 fcc1 	bl	8003890 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000190 	.word	0x20000190

08000f18 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <SPI4_IRQHandler+0x18>)
 8000f1e:	f002 fcb7 	bl	8003890 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */
//  mcp2518fd_receive();
  HAL_SPI_Receive_IT(&hspi4, RX_Buffer, BUFFER_SIZE);
 8000f22:	2264      	movs	r2, #100	; 0x64
 8000f24:	4903      	ldr	r1, [pc, #12]	; (8000f34 <SPI4_IRQHandler+0x1c>)
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <SPI4_IRQHandler+0x18>)
 8000f28:	f002 fb80 	bl	800362c <HAL_SPI_Receive_IT>
  /* USER CODE END SPI4_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001e8 	.word	0x200001e8
 8000f34:	2000012c 	.word	0x2000012c

08000f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return 1;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_kill>:

int _kill(int pid, int sig)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f52:	f004 fa5b 	bl	800540c <__errno>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2216      	movs	r2, #22
 8000f5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_exit>:

void _exit (int status)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffe7 	bl	8000f48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f7a:	e7fe      	b.n	8000f7a <_exit+0x12>

08000f7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00a      	b.n	8000fa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f8e:	f3af 8000 	nop.w
 8000f92:	4601      	mov	r1, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf0      	blt.n	8000f8e <_read+0x12>
  }

  return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e009      	b.n	8000fdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf1      	blt.n	8000fc8 <_write+0x12>
  }
  return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001016:	605a      	str	r2, [r3, #4]
  return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f004 f9c0 	bl	800540c <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20020000 	.word	0x20020000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	20000244 	.word	0x20000244
 80010c0:	20000590 	.word	0x20000590

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <MX_TIM4_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	463b      	mov	r3, r7
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_TIM4_Init+0x94>)
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <MX_TIM4_Init+0x98>)
 8001108:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_TIM4_Init+0x94>)
 800110c:	2263      	movs	r2, #99	; 0x63
 800110e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_TIM4_Init+0x94>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_TIM4_Init+0x94>)
 8001118:	f240 32e7 	movw	r2, #999	; 0x3e7
 800111c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_TIM4_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_TIM4_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800112a:	4814      	ldr	r0, [pc, #80]	; (800117c <MX_TIM4_Init+0x94>)
 800112c:	f002 ffc3 	bl	80040b6 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001136:	f7ff fd57 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_TIM4_Init+0x94>)
 8001148:	f003 f96e 	bl	8004428 <HAL_TIM_ConfigClockSource>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001152:	f7ff fd49 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_TIM4_Init+0x94>)
 8001164:	f003 fb74 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800116e:	f7ff fd3b 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000248 	.word	0x20000248
 8001180:	40000800 	.word	0x40000800

08001184 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_TIM10_Init+0x40>)
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <MX_TIM10_Init+0x44>)
 800118c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <MX_TIM10_Init+0x40>)
 8001190:	2263      	movs	r2, #99	; 0x63
 8001192:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_TIM10_Init+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_TIM10_Init+0x40>)
 800119c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_TIM10_Init+0x40>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_TIM10_Init+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_TIM10_Init+0x40>)
 80011b0:	f002 ff81 	bl	80040b6 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80011ba:	f7ff fd15 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000290 	.word	0x20000290
 80011c8:	40014400 	.word	0x40014400

080011cc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_TIM11_Init+0x40>)
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <MX_TIM11_Init+0x44>)
 80011d4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <MX_TIM11_Init+0x40>)
 80011d8:	2263      	movs	r2, #99	; 0x63
 80011da:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_TIM11_Init+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_TIM11_Init+0x40>)
 80011e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_TIM11_Init+0x40>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_TIM11_Init+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM11_Init+0x40>)
 80011f8:	f002 ff5d 	bl	80040b6 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001202:	f7ff fcf1 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002d8 	.word	0x200002d8
 8001210:	40014800 	.word	0x40014800

08001214 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a2a      	ldr	r2, [pc, #168]	; (80012cc <HAL_TIM_Base_MspInit+0xb8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d116      	bne.n	8001254 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	201e      	movs	r0, #30
 8001248:	f000 f9e3 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800124c:	201e      	movs	r0, #30
 800124e:	f000 f9fc 	bl	800164a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001252:	e036      	b.n	80012c2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_TIM_Base_MspInit+0xc0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d116      	bne.n	800128c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2019      	movs	r0, #25
 8001280:	f000 f9c7 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001284:	2019      	movs	r0, #25
 8001286:	f000 f9e0 	bl	800164a <HAL_NVIC_EnableIRQ>
}
 800128a:	e01a      	b.n	80012c2 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM11)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d115      	bne.n	80012c2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_TIM_Base_MspInit+0xbc>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	201a      	movs	r0, #26
 80012b8:	f000 f9ab 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012bc:	201a      	movs	r0, #26
 80012be:	f000 f9c4 	bl	800164a <HAL_NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40000800 	.word	0x40000800
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40014400 	.word	0x40014400
 80012d8:	40014800 	.word	0x40014800

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012e2:	490e      	ldr	r1, [pc, #56]	; (800131c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f8:	4c0b      	ldr	r4, [pc, #44]	; (8001328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001306:	f7ff fedd 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f004 f885 	bl	8005418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fb8b 	bl	8000a28 <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001320:	08006320 	.word	0x08006320
  ldr r2, =_sbss
 8001324:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001328:	2000058c 	.word	0x2000058c

0800132c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <HAL_Init+0x40>)
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_Init+0x40>)
 8001346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_Init+0x40>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 f94f 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	2000      	movs	r0, #0
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fd40 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023c00 	.word	0x40023c00

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f967 	bl	8001666 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f92f 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000320 	.word	0x20000320

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000320 	.word	0x20000320

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff29 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff3e 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff8e 	bl	8001550 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5d 	bl	80014fc <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff31 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffa2 	bl	80015b8 <SysTick_Config>
 8001674:	4603      	mov	r3, r0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d004      	beq.n	800169c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e00c      	b.n	80016b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2205      	movs	r2, #5
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	e159      	b.n	8001994 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8148 	bne.w	800198e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001712:	2b02      	cmp	r3, #2
 8001714:	d130      	bne.n	8001778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d017      	beq.n	80017b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	69b9      	ldr	r1, [r7, #24]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a2 	beq.w	800198e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <HAL_GPIO_Init+0x2e8>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a56      	ldr	r2, [pc, #344]	; (80019ac <HAL_GPIO_Init+0x2e8>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <HAL_GPIO_Init+0x2e8>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001866:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_GPIO_Init+0x2ec>)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_GPIO_Init+0x2f0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d019      	beq.n	80018c6 <HAL_GPIO_Init+0x202>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a48      	ldr	r2, [pc, #288]	; (80019b8 <HAL_GPIO_Init+0x2f4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x1fe>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a47      	ldr	r2, [pc, #284]	; (80019bc <HAL_GPIO_Init+0x2f8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x1fa>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <HAL_GPIO_Init+0x2fc>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x1f6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a45      	ldr	r2, [pc, #276]	; (80019c4 <HAL_GPIO_Init+0x300>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x1f2>
 80018b2:	2304      	movs	r3, #4
 80018b4:	e008      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x204>
 80018c6:	2300      	movs	r3, #0
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f002 0203 	and.w	r2, r2, #3
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d8:	4935      	ldr	r1, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x2ec>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_GPIO_Init+0x304>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190a:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001934:	4a24      	ldr	r2, [pc, #144]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_GPIO_Init+0x304>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001988:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <HAL_GPIO_Init+0x304>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b0f      	cmp	r3, #15
 8001998:	f67f aea2 	bls.w	80016e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40013c00 	.word	0x40013c00

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e8:	e003      	b.n	80019f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a10:	887a      	ldrh	r2, [r7, #2]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	400b      	ands	r3, r1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8a2 	bl	8000b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e12b      	b.n	8001cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe fec2 	bl	8000814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ac8:	f001 fa20 	bl	8002f0c <HAL_RCC_GetPCLK1Freq>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a81      	ldr	r2, [pc, #516]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d807      	bhi.n	8001ae8 <HAL_I2C_Init+0x84>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a80      	ldr	r2, [pc, #512]	; (8001cdc <HAL_I2C_Init+0x278>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e006      	b.n	8001af6 <HAL_I2C_Init+0x92>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a7d      	ldr	r2, [pc, #500]	; (8001ce0 <HAL_I2C_Init+0x27c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0e7      	b.n	8001cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4a78      	ldr	r2, [pc, #480]	; (8001ce4 <HAL_I2C_Init+0x280>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d802      	bhi.n	8001b38 <HAL_I2C_Init+0xd4>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3301      	adds	r3, #1
 8001b36:	e009      	b.n	8001b4c <HAL_I2C_Init+0xe8>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4a69      	ldr	r2, [pc, #420]	; (8001ce8 <HAL_I2C_Init+0x284>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	495c      	ldr	r1, [pc, #368]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	d819      	bhi.n	8001ba0 <HAL_I2C_Init+0x13c>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e59      	subs	r1, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b80:	400b      	ands	r3, r1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00a      	beq.n	8001b9c <HAL_I2C_Init+0x138>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e59      	subs	r1, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9a:	e051      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e04f      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d111      	bne.n	8001bcc <HAL_I2C_Init+0x168>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e58      	subs	r0, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e012      	b.n	8001bf2 <HAL_I2C_Init+0x18e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1e58      	subs	r0, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	0099      	lsls	r1, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Init+0x196>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e022      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <HAL_I2C_Init+0x1bc>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e58      	subs	r0, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	440b      	add	r3, r1
 8001c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1e:	e00f      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1e58      	subs	r0, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	0099      	lsls	r1, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	6809      	ldr	r1, [r1, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69da      	ldr	r2, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6911      	ldr	r1, [r2, #16]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68d2      	ldr	r2, [r2, #12]
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	000186a0 	.word	0x000186a0
 8001cdc:	001e847f 	.word	0x001e847f
 8001ce0:	003d08ff 	.word	0x003d08ff
 8001ce4:	431bde83 	.word	0x431bde83
 8001ce8:	10624dd3 	.word	0x10624dd3

08001cec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e128      	b.n	8001f50 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a90      	ldr	r2, [pc, #576]	; (8001f58 <HAL_I2S_Init+0x26c>)
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7fe fdf1 	bl	8000900 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d34:	f023 030f 	bic.w	r3, r3, #15
 8001d38:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d060      	beq.n	8001e0c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d52:	2310      	movs	r3, #16
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e001      	b.n	8001d5c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d802      	bhi.n	8001d6a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f001 f9d2 	bl	8003114 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d70:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7a:	d125      	bne.n	8001dc8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	3305      	adds	r3, #5
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e01f      	b.n	8001de6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	461a      	mov	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	3305      	adds	r3, #5
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	e00e      	b.n	8001de6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	461a      	mov	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	3305      	adds	r3, #5
 8001de4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4a5c      	ldr	r2, [pc, #368]	; (8001f5c <HAL_I2S_Init+0x270>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	08db      	lsrs	r3, r3, #3
 8001df0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	e003      	b.n	8001e14 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d902      	bls.n	8001e20 <HAL_I2S_Init+0x134>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	2bff      	cmp	r3, #255	; 0xff
 8001e1e:	d907      	bls.n	8001e30 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	f043 0210 	orr.w	r2, r3, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e08f      	b.n	8001f50 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	ea42 0103 	orr.w	r1, r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e4e:	f023 030f 	bic.w	r3, r3, #15
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6851      	ldr	r1, [r2, #4]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6892      	ldr	r2, [r2, #8]
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68d2      	ldr	r2, [r2, #12]
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6992      	ldr	r2, [r2, #24]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e72:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d161      	bne.n	8001f40 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a38      	ldr	r2, [pc, #224]	; (8001f60 <HAL_I2S_Init+0x274>)
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <HAL_I2S_Init+0x278>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_I2S_Init+0x1a4>
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_I2S_Init+0x27c>)
 8001e8e:	e001      	b.n	8001e94 <HAL_I2S_Init+0x1a8>
 8001e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	4932      	ldr	r1, [pc, #200]	; (8001f64 <HAL_I2S_Init+0x278>)
 8001e9c:	428a      	cmp	r2, r1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_I2S_Init+0x1b8>
 8001ea0:	4a31      	ldr	r2, [pc, #196]	; (8001f68 <HAL_I2S_Init+0x27c>)
 8001ea2:	e001      	b.n	8001ea8 <HAL_I2S_Init+0x1bc>
 8001ea4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001ea8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001eac:	f023 030f 	bic.w	r3, r3, #15
 8001eb0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <HAL_I2S_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2S_Init+0x1d4>
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_I2S_Init+0x27c>)
 8001ebe:	e001      	b.n	8001ec4 <HAL_I2S_Init+0x1d8>
 8001ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	; (8001f64 <HAL_I2S_Init+0x278>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2S_Init+0x1ea>
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_I2S_Init+0x27c>)
 8001ed4:	e001      	b.n	8001eda <HAL_I2S_Init+0x1ee>
 8001ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee6:	d003      	beq.n	8001ef0 <HAL_I2S_Init+0x204>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e001      	b.n	8001efc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f28:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_I2S_Init+0x278>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_I2S_Init+0x24c>
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_I2S_Init+0x27c>)
 8001f36:	e001      	b.n	8001f3c <HAL_I2S_Init+0x250>
 8001f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f3c:	897a      	ldrh	r2, [r7, #10]
 8001f3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	08002063 	.word	0x08002063
 8001f5c:	cccccccd 	.word	0xcccccccd
 8001f60:	08002179 	.word	0x08002179
 8001f64:	40003800 	.word	0x40003800
 8001f68:	40003400 	.word	0x40003400

08001f6c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	881a      	ldrh	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	1c9a      	adds	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffb8 	bl	8001f6c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	b292      	uxth	r2, r2
 8002018:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	1c9a      	adds	r2, r3, #2
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10e      	bne.n	800205a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800204a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff93 	bl	8001f80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b04      	cmp	r3, #4
 800207c:	d13a      	bne.n	80020f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d109      	bne.n	800209c <I2S_IRQHandler+0x3a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d102      	bne.n	800209c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ffb4 	bl	8002004 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d126      	bne.n	80020f4 <I2S_IRQHandler+0x92>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d11f      	bne.n	80020f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff50 	bl	8001f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d136      	bne.n	800216e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d109      	bne.n	800211e <I2S_IRQHandler+0xbc>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002114:	2b80      	cmp	r3, #128	; 0x80
 8002116:	d102      	bne.n	800211e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff45 	bl	8001fa8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b08      	cmp	r3, #8
 8002126:	d122      	bne.n	800216e <I2S_IRQHandler+0x10c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b20      	cmp	r3, #32
 8002134:	d11b      	bne.n	800216e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002144:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	f043 0204 	orr.w	r2, r3, #4
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff13 	bl	8001f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a92      	ldr	r2, [pc, #584]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002192:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002194:	e001      	b.n	800219a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a8b      	ldr	r2, [pc, #556]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80021b0:	4b8a      	ldr	r3, [pc, #552]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021b2:	e001      	b.n	80021b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80021b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c4:	d004      	beq.n	80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 8099 	bne.w	8002302 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d107      	bne.n	80021ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f925 	bl	8002434 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f9c8 	bl	8002594 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d13a      	bne.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d035      	beq.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6e      	ldr	r2, [pc, #440]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002222:	4b6e      	ldr	r3, [pc, #440]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002224:	e001      	b.n	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4969      	ldr	r1, [pc, #420]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002232:	428b      	cmp	r3, r1
 8002234:	d101      	bne.n	800223a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002236:	4b69      	ldr	r3, [pc, #420]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002238:	e001      	b.n	800223e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800223a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800223e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002242:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002252:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fe88 	bl	8001f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b08      	cmp	r3, #8
 800228c:	f040 80c3 	bne.w	8002416 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80bd 	beq.w	8002416 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a49      	ldr	r2, [pc, #292]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80022b6:	4b49      	ldr	r3, [pc, #292]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022b8:	e001      	b.n	80022be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80022ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4944      	ldr	r1, [pc, #272]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d101      	bne.n	80022ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80022ca:	4b44      	ldr	r3, [pc, #272]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022cc:	e001      	b.n	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80022ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fe4a 	bl	8001f94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002300:	e089      	b.n	8002416 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b02      	cmp	r3, #2
 800230a:	d107      	bne.n	800231c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f8be 	bl	8002498 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f8fd 	bl	8002530 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d12f      	bne.n	80023a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d02a      	beq.n	80023a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002358:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002366:	e001      	b.n	800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4919      	ldr	r1, [pc, #100]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002374:	428b      	cmp	r3, r1
 8002376:	d101      	bne.n	800237c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800237a:	e001      	b.n	8002380 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800237c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002384:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fdfa 	bl	8001f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d136      	bne.n	8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d031      	beq.n	8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023c0:	e001      	b.n	80023c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80023c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4902      	ldr	r1, [pc, #8]	; (80023d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023ce:	428b      	cmp	r3, r1
 80023d0:	d106      	bne.n	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80023d2:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023d4:	e006      	b.n	80023e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80023d6:	bf00      	nop
 80023d8:	40003800 	.word	0x40003800
 80023dc:	40003400 	.word	0x40003400
 80023e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0204 	orr.w	r2, r3, #4
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fdc0 	bl	8001f94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002414:	e000      	b.n	8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002416:	bf00      	nop
}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	1c99      	adds	r1, r3, #2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6251      	str	r1, [r2, #36]	; 0x24
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d113      	bne.n	800248e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002474:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d106      	bne.n	800248e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffc9 	bl	8002420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	1c99      	adds	r1, r3, #2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6251      	str	r1, [r2, #36]	; 0x24
 80024aa:	8819      	ldrh	r1, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <I2SEx_TxISR_I2SExt+0x90>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <I2SEx_TxISR_I2SExt+0x22>
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <I2SEx_TxISR_I2SExt+0x94>)
 80024b8:	e001      	b.n	80024be <I2SEx_TxISR_I2SExt+0x26>
 80024ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024be:	460a      	mov	r2, r1
 80024c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d121      	bne.n	800251e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a12      	ldr	r2, [pc, #72]	; (8002528 <I2SEx_TxISR_I2SExt+0x90>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <I2SEx_TxISR_I2SExt+0x50>
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <I2SEx_TxISR_I2SExt+0x94>)
 80024e6:	e001      	b.n	80024ec <I2SEx_TxISR_I2SExt+0x54>
 80024e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	490d      	ldr	r1, [pc, #52]	; (8002528 <I2SEx_TxISR_I2SExt+0x90>)
 80024f4:	428b      	cmp	r3, r1
 80024f6:	d101      	bne.n	80024fc <I2SEx_TxISR_I2SExt+0x64>
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <I2SEx_TxISR_I2SExt+0x94>)
 80024fa:	e001      	b.n	8002500 <I2SEx_TxISR_I2SExt+0x68>
 80024fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002500:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002504:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff81 	bl	8002420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40003800 	.word	0x40003800
 800252c:	40003400 	.word	0x40003400

08002530 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68d8      	ldr	r0, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	1c99      	adds	r1, r3, #2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002548:	b282      	uxth	r2, r0
 800254a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800255e:	b29b      	uxth	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d113      	bne.n	800258c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002572:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ff4a 	bl	8002420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <I2SEx_RxISR_I2SExt+0x90>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <I2SEx_RxISR_I2SExt+0x16>
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <I2SEx_RxISR_I2SExt+0x94>)
 80025a8:	e001      	b.n	80025ae <I2SEx_RxISR_I2SExt+0x1a>
 80025aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ae:	68d8      	ldr	r0, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	1c99      	adds	r1, r3, #2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80025ba:	b282      	uxth	r2, r0
 80025bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d121      	bne.n	800261a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <I2SEx_RxISR_I2SExt+0x90>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <I2SEx_RxISR_I2SExt+0x50>
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <I2SEx_RxISR_I2SExt+0x94>)
 80025e2:	e001      	b.n	80025e8 <I2SEx_RxISR_I2SExt+0x54>
 80025e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	490d      	ldr	r1, [pc, #52]	; (8002624 <I2SEx_RxISR_I2SExt+0x90>)
 80025f0:	428b      	cmp	r3, r1
 80025f2:	d101      	bne.n	80025f8 <I2SEx_RxISR_I2SExt+0x64>
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <I2SEx_RxISR_I2SExt+0x94>)
 80025f6:	e001      	b.n	80025fc <I2SEx_RxISR_I2SExt+0x68>
 80025f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002600:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff03 	bl	8002420 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40003800 	.word	0x40003800
 8002628:	40003400 	.word	0x40003400

0800262c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e267      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d075      	beq.n	8002736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d00c      	beq.n	8002670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b85      	ldr	r3, [pc, #532]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265e:	2b08      	cmp	r3, #8
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002662:	4b82      	ldr	r3, [pc, #520]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266e:	d10b      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	4b7e      	ldr	r3, [pc, #504]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05b      	beq.n	8002734 <HAL_RCC_OscConfig+0x108>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d157      	bne.n	8002734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e242      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x74>
 8002692:	4b76      	ldr	r3, [pc, #472]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x98>
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6f      	ldr	r2, [pc, #444]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6c      	ldr	r2, [pc, #432]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026c4:	4b69      	ldr	r3, [pc, #420]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a68      	ldr	r2, [pc, #416]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fe8a 	bl	80013fc <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe fe86 	bl	80013fc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e207      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0xc0>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fe76 	bl	80013fc <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fe72 	bl	80013fc <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1f3      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0xe8>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d063      	beq.n	800280a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	4b44      	ldr	r3, [pc, #272]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e1c7      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4937      	ldr	r1, [pc, #220]	; (800286c <HAL_RCC_OscConfig+0x240>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_OscConfig+0x244>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fe2b 	bl	80013fc <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe fe27 	bl	80013fc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1a8      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4925      	ldr	r1, [pc, #148]	; (800286c <HAL_RCC_OscConfig+0x240>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_RCC_OscConfig+0x244>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fe0a 	bl	80013fc <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f7fe fe06 	bl	80013fc <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e187      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d036      	beq.n	8002884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_RCC_OscConfig+0x248>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fdea 	bl	80013fc <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe fde6 	bl	80013fc <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e167      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x240>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x200>
 800284a:	e01b      	b.n	8002884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_OscConfig+0x248>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe fdd3 	bl	80013fc <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	e00e      	b.n	8002878 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe fdcf 	bl	80013fc <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d907      	bls.n	8002878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e150      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
 800286c:	40023800 	.word	0x40023800
 8002870:	42470000 	.word	0x42470000
 8002874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002878:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ea      	bne.n	800285a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8097 	beq.w	80029c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002896:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a7c      	ldr	r2, [pc, #496]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b7a      	ldr	r3, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a73      	ldr	r2, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7fe fd8f 	bl	80013fc <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7fe fd8b 	bl	80013fc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e10c      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x474>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x2ea>
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
 8002914:	e01c      	b.n	8002950 <HAL_RCC_OscConfig+0x324>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x30c>
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a5b      	ldr	r2, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0x324>
 8002938:	4b58      	ldr	r3, [pc, #352]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe fd50 	bl	80013fc <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe fd4c 	bl	80013fc <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0cb      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ee      	beq.n	8002960 <HAL_RCC_OscConfig+0x334>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002984:	f7fe fd3a 	bl	80013fc <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe fd36 	bl	80013fc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0b5      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a2:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1ee      	bne.n	800298c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b4:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80a1 	beq.w	8002b0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d05c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d141      	bne.n	8002a62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7fe fd0a 	bl	80013fc <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe fd06 	bl	80013fc <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e087      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	041b      	lsls	r3, r3, #16
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	491b      	ldr	r1, [pc, #108]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fcdf 	bl	80013fc <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe fcdb 	bl	80013fc <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e05c      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x416>
 8002a60:	e054      	b.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_RCC_OscConfig+0x478>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe fcc8 	bl	80013fc <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe fcc4 	bl	80013fc <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e045      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_OscConfig+0x470>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x444>
 8002a8e:	e03d      	b.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e038      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x4ec>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d028      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d121      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d11a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ade:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d111      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	3b01      	subs	r3, #1
 8002af2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0cc      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d90c      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d044      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d119      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e067      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4934      	ldr	r1, [pc, #208]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fbf6 	bl	80013fc <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fe fbf2 	bl	80013fc <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e04f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d20c      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490a      	ldr	r1, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fb56 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08006218 	.word	0x08006218
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b094      	sub	sp, #80	; 0x50
 8002cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d00:	4b79      	ldr	r3, [pc, #484]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d00d      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	f200 80e1 	bhi.w	8002ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x34>
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d003      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1a:	e0db      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d20:	e0db      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d22:	4b73      	ldr	r3, [pc, #460]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d26:	e0d8      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d28:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d32:	4b6d      	ldr	r3, [pc, #436]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d063      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	2200      	movs	r2, #0
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d50:	633b      	str	r3, [r7, #48]	; 0x30
 8002d52:	2300      	movs	r3, #0
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
 8002d56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	f04f 0000 	mov.w	r0, #0
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	0159      	lsls	r1, r3, #5
 8002d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d6c:	0150      	lsls	r0, r2, #5
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4621      	mov	r1, r4
 8002d74:	1a51      	subs	r1, r2, r1
 8002d76:	6139      	str	r1, [r7, #16]
 8002d78:	4629      	mov	r1, r5
 8002d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d8c:	4659      	mov	r1, fp
 8002d8e:	018b      	lsls	r3, r1, #6
 8002d90:	4651      	mov	r1, sl
 8002d92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d96:	4651      	mov	r1, sl
 8002d98:	018a      	lsls	r2, r1, #6
 8002d9a:	4651      	mov	r1, sl
 8002d9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002da0:	4659      	mov	r1, fp
 8002da2:	eb63 0901 	sbc.w	r9, r3, r1
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dba:	4690      	mov	r8, r2
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	eb18 0303 	adds.w	r3, r8, r3
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	462b      	mov	r3, r5
 8002dc8:	eb49 0303 	adc.w	r3, r9, r3
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dda:	4629      	mov	r1, r5
 8002ddc:	024b      	lsls	r3, r1, #9
 8002dde:	4621      	mov	r1, r4
 8002de0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002de4:	4621      	mov	r1, r4
 8002de6:	024a      	lsls	r2, r1, #9
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dee:	2200      	movs	r2, #0
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002df8:	f7fd fa42 	bl	8000280 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4613      	mov	r3, r2
 8002e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e04:	e058      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e06:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	099b      	lsrs	r3, r3, #6
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4611      	mov	r1, r2
 8002e12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e16:	623b      	str	r3, [r7, #32]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	0159      	lsls	r1, r3, #5
 8002e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e32:	0150      	lsls	r0, r2, #5
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e3e:	4649      	mov	r1, r9
 8002e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e58:	ebb2 040a 	subs.w	r4, r2, sl
 8002e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	00eb      	lsls	r3, r5, #3
 8002e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6e:	00e2      	lsls	r2, r4, #3
 8002e70:	4614      	mov	r4, r2
 8002e72:	461d      	mov	r5, r3
 8002e74:	4643      	mov	r3, r8
 8002e76:	18e3      	adds	r3, r4, r3
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	eb45 0303 	adc.w	r3, r5, r3
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e8e:	4629      	mov	r1, r5
 8002e90:	028b      	lsls	r3, r1, #10
 8002e92:	4621      	mov	r1, r4
 8002e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e98:	4621      	mov	r1, r4
 8002e9a:	028a      	lsls	r2, r1, #10
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	61fa      	str	r2, [r7, #28]
 8002ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eac:	f7fd f9e8 	bl	8000280 <__aeabi_uldivmod>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed2:	e002      	b.n	8002eda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetSysClockFreq+0x204>)
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3750      	adds	r7, #80	; 0x50
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	00f42400 	.word	0x00f42400
 8002ef0:	007a1200 	.word	0x007a1200

08002ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000000 	.word	0x20000000

08002f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f10:	f7ff fff0 	bl	8002ef4 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0a9b      	lsrs	r3, r3, #10
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	; (8002f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	08006228 	.word	0x08006228

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d038      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f5c:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f62:	f7fe fa4b 	bl	80013fc <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f6a:	f7fe fa47 	bl	80013fc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0bd      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	071b      	lsls	r3, r3, #28
 8002f9a:	495a      	ldr	r1, [pc, #360]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fa2:	4b57      	ldr	r3, [pc, #348]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fa28 	bl	80013fc <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fb0:	f7fe fa24 	bl	80013fc <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e09a      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fc2:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8083 	beq.w	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	4b48      	ldr	r3, [pc, #288]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	4a47      	ldr	r2, [pc, #284]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6413      	str	r3, [r2, #64]	; 0x40
 8002fec:	4b45      	ldr	r3, [pc, #276]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a42      	ldr	r2, [pc, #264]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003004:	f7fe f9fa 	bl	80013fc <HAL_GetTick>
 8003008:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800300c:	f7fe f9f6 	bl	80013fc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e06c      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800301e:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800302a:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d02f      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	429a      	cmp	r2, r3
 8003046:	d028      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003048:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003050:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003058:	4b2c      	ldr	r3, [pc, #176]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800305e:	4a29      	ldr	r2, [pc, #164]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d114      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe f9c4 	bl	80013fc <HAL_GetTick>
 8003074:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	e00a      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe f9c0 	bl	80013fc <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	; 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e034      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0ee      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a6:	d10d      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030bc:	4911      	ldr	r1, [pc, #68]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
 80030c2:	e005      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030ce:	6093      	str	r3, [r2, #8]
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	4909      	ldr	r1, [pc, #36]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7d1a      	ldrb	r2, [r3, #20]
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80030f4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	42470068 	.word	0x42470068
 8003104:	40023800 	.word	0x40023800
 8003108:	40007000 	.word	0x40007000
 800310c:	42470e40 	.word	0x42470e40
 8003110:	424711e0 	.word	0x424711e0

08003114 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d140      	bne.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d131      	bne.n	80031ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800314a:	617b      	str	r3, [r7, #20]
          break;
 800314c:	e031      	b.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315a:	d109      	bne.n	8003170 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003166:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e008      	b.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	0f1b      	lsrs	r3, r3, #28
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
          break;
 80031aa:	e002      	b.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
          break;
 80031b0:	bf00      	nop
        }
      }
      break;
 80031b2:	bf00      	nop
    }
  }
  return frequency;
 80031b4:	697b      	ldr	r3, [r7, #20]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00bb8000 	.word	0x00bb8000
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	00f42400 	.word	0x00f42400

080031d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07b      	b.n	80032de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f6:	d009      	beq.n	800320c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
 80031fe:	e005      	b.n	800320c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fd50 	bl	8000ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	f003 0104 	and.w	r1, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f003 0210 	and.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08c      	sub	sp, #48	; 0x30
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032f4:	2301      	movs	r3, #1
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_SPI_TransmitReceive+0x26>
 8003308:	2302      	movs	r3, #2
 800330a:	e18a      	b.n	8003622 <HAL_SPI_TransmitReceive+0x33c>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003314:	f7fe f872 	bl	80013fc <HAL_GetTick>
 8003318:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800332e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003332:	2b01      	cmp	r3, #1
 8003334:	d00f      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x70>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333c:	d107      	bne.n	800334e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <HAL_SPI_TransmitReceive+0x68>
 8003346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800334a:	2b04      	cmp	r3, #4
 800334c:	d003      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800334e:	2302      	movs	r3, #2
 8003350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003354:	e15b      	b.n	800360e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x82>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x82>
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800336e:	e14e      	b.n	800360e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b04      	cmp	r3, #4
 800337a:	d003      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2205      	movs	r2, #5
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	887a      	ldrh	r2, [r7, #2]
 80033a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b40      	cmp	r3, #64	; 0x40
 80033c6:	d007      	beq.n	80033d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e0:	d178      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0x10a>
 80033ea:	8b7b      	ldrh	r3, [r7, #26]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d166      	bne.n	80034be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	1c9a      	adds	r2, r3, #2
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003414:	e053      	b.n	80034be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d11b      	bne.n	800345c <HAL_SPI_TransmitReceive+0x176>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <HAL_SPI_TransmitReceive+0x176>
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d113      	bne.n	800345c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	881a      	ldrh	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	1c9a      	adds	r2, r3, #2
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d119      	bne.n	800349e <HAL_SPI_TransmitReceive+0x1b8>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d014      	beq.n	800349e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	b292      	uxth	r2, r2
 8003480:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	1c9a      	adds	r2, r3, #2
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800349a:	2301      	movs	r3, #1
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800349e:	f7fd ffad 	bl	80013fc <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d807      	bhi.n	80034be <HAL_SPI_TransmitReceive+0x1d8>
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d003      	beq.n	80034be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034bc:	e0a7      	b.n	800360e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1a6      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x130>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1a1      	bne.n	8003416 <HAL_SPI_TransmitReceive+0x130>
 80034d2:	e07c      	b.n	80035ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_SPI_TransmitReceive+0x1fc>
 80034dc:	8b7b      	ldrh	r3, [r7, #26]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d16b      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003508:	e057      	b.n	80035ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d11c      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x26c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d017      	beq.n	8003552 <HAL_SPI_TransmitReceive+0x26c>
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d114      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	7812      	ldrb	r2, [r2, #0]
 8003534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d119      	bne.n	8003594 <HAL_SPI_TransmitReceive+0x2ae>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d014      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003590:	2301      	movs	r3, #1
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003594:	f7fd ff32 	bl	80013fc <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d803      	bhi.n	80035ac <HAL_SPI_TransmitReceive+0x2c6>
 80035a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x2cc>
 80035ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d103      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035b8:	e029      	b.n	800360e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1a2      	bne.n	800350a <HAL_SPI_TransmitReceive+0x224>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d19d      	bne.n	800350a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fc7a 	bl	8003ecc <SPI_EndRxTxTransaction>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035ea:	e010      	b.n	800360e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10b      	bne.n	800360c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	e000      	b.n	800360e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800360c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800361e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003622:	4618      	mov	r0, r3
 8003624:	3730      	adds	r7, #48	; 0x30
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d110      	bne.n	8003668 <HAL_SPI_Receive_IT+0x3c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364e:	d10b      	bne.n	8003668 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2204      	movs	r2, #4
 8003654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f882 	bl	8003768 <HAL_SPI_TransmitReceive_IT>
 8003664:	4603      	mov	r3, r0
 8003666:	e076      	b.n	8003756 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_SPI_Receive_IT+0x4a>
 8003672:	2302      	movs	r3, #2
 8003674:	e06f      	b.n	8003756 <HAL_SPI_Receive_IT+0x12a>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d002      	beq.n	8003690 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800368a:	2302      	movs	r3, #2
 800368c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800368e:	e05d      	b.n	800374c <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_SPI_Receive_IT+0x70>
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036a0:	e054      	b.n	800374c <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2204      	movs	r2, #4
 80036a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a1e      	ldr	r2, [pc, #120]	; (8003760 <HAL_SPI_Receive_IT+0x134>)
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
 80036e8:	e002      	b.n	80036f0 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <HAL_SPI_Receive_IT+0x138>)
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f8:	d10f      	bne.n	800371a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003718:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003728:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d008      	beq.n	800374a <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e000      	b.n	800374c <HAL_SPI_Receive_IT+0x120>
  }

error :
 800374a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003754:	7dfb      	ldrb	r3, [r7, #23]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	08003ca9 	.word	0x08003ca9
 8003764:	08003c5f 	.word	0x08003c5f

08003768 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_SPI_TransmitReceive_IT+0x20>
 8003784:	2302      	movs	r3, #2
 8003786:	e075      	b.n	8003874 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003796:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800379e:	7dbb      	ldrb	r3, [r7, #22]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d00d      	beq.n	80037c0 <HAL_SPI_TransmitReceive_IT+0x58>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037aa:	d106      	bne.n	80037ba <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <HAL_SPI_TransmitReceive_IT+0x52>
 80037b4:	7dbb      	ldrb	r3, [r7, #22]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037be:	e054      	b.n	800386a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037d6:	e048      	b.n	800386a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d003      	beq.n	80037ec <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2205      	movs	r2, #5
 80037e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	887a      	ldrh	r2, [r7, #2]
 8003802:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	887a      	ldrh	r2, [r7, #2]
 800380e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a17      	ldr	r2, [pc, #92]	; (8003880 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a17      	ldr	r2, [pc, #92]	; (8003884 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
 800382a:	e005      	b.n	8003838 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a15      	ldr	r2, [pc, #84]	; (800388c <HAL_SPI_TransmitReceive_IT+0x124>)
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003846:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d008      	beq.n	8003868 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e000      	b.n	800386a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003868:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	08003ba1 	.word	0x08003ba1
 8003884:	08003c01 	.word	0x08003c01
 8003888:	08003add 	.word	0x08003add
 800388c:	08003b41 	.word	0x08003b41

08003890 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10e      	bne.n	80038d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
    return;
 80038ce:	e0ce      	b.n	8003a6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_SPI_IRQHandler+0x5e>
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
    return;
 80038ec:	e0bf      	b.n	8003a6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <HAL_SPI_IRQHandler+0x7e>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80b0 	beq.w	8003a6e <HAL_SPI_IRQHandler+0x1de>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80aa 	beq.w	8003a6e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d023      	beq.n	800396c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b03      	cmp	r3, #3
 800392e:	d011      	beq.n	8003954 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f043 0204 	orr.w	r2, r3, #4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	e00b      	b.n	800396c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	693b      	ldr	r3, [r7, #16]
        return;
 800396a:	e080      	b.n	8003a6e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d014      	beq.n	80039a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f043 0208 	orr.w	r2, r3, #8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d04f      	beq.n	8003a6c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_SPI_IRQHandler+0x168>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d034      	beq.n	8003a62 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0203 	bic.w	r2, r2, #3
 8003a06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d011      	beq.n	8003a34 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <HAL_SPI_IRQHandler+0x1e4>)
 8003a16:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fd fe2e 	bl	800167e <HAL_DMA_Abort_IT>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a40:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_SPI_IRQHandler+0x1e4>)
 8003a42:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd fe18 	bl	800167e <HAL_DMA_Abort_IT>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003a60:	e003      	b.n	8003a6a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f81c 	bl	8003aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a68:	e000      	b.n	8003a6c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003a6a:	bf00      	nop
    return;
 8003a6c:	bf00      	nop
  }
}
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	08003ab5 	.word	0x08003ab5

08003a78 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff ffe6 	bl	8003aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f103 020c 	add.w	r2, r3, #12
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10f      	bne.n	8003b38 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b26:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa0c 	bl	8003f50 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10f      	bne.n	8003b98 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b86:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9dc 	bl	8003f50 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9ac 	bl	8003f50 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	881a      	ldrh	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	1c9a      	adds	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10f      	bne.n	8003c56 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c44:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f97d 	bl	8003f50 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f103 020c 	add.w	r2, r3, #12
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f9cc 	bl	8004038 <SPI_CloseRx_ISR>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d102      	bne.n	8003ce6 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f9a9 	bl	8004038 <SPI_CloseRx_ISR>
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d00:	f7fd fb7c 	bl	80013fc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d10:	f7fd fb74 	bl	80013fc <HAL_GetTick>
 8003d14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d16:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	015b      	lsls	r3, r3, #5
 8003d1c:	0d1b      	lsrs	r3, r3, #20
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	fb02 f303 	mul.w	r3, r2, r3
 8003d24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d26:	e054      	b.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2e:	d050      	beq.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d30:	f7fd fb64 	bl	80013fc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d902      	bls.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d13d      	bne.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5e:	d111      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d68:	d004      	beq.n	8003d74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d107      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8c:	d10f      	bne.n	8003dae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e017      	b.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d19b      	bne.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e14:	d111      	bne.n	8003e3a <SPI_EndRxTransaction+0x3a>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	d004      	beq.n	8003e2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d107      	bne.n	8003e3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e42:	d12a      	bne.n	8003e9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4c:	d012      	beq.n	8003e74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ff49 	bl	8003cf0 <SPI_WaitFlagStateUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d02d      	beq.n	8003ec0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e026      	b.n	8003ec2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ff36 	bl	8003cf0 <SPI_WaitFlagStateUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01a      	beq.n	8003ec0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e013      	b.n	8003ec2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff ff23 	bl	8003cf0 <SPI_WaitFlagStateUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e000      	b.n	8003ec2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <SPI_EndRxTxTransaction+0x7c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <SPI_EndRxTxTransaction+0x80>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0d5b      	lsrs	r3, r3, #21
 8003ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef6:	d112      	bne.n	8003f1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fef4 	bl	8003cf0 <SPI_WaitFlagStateUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e00f      	b.n	8003f3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d0f2      	beq.n	8003f1e <SPI_EndRxTxTransaction+0x52>
 8003f38:	e000      	b.n	8003f3c <SPI_EndRxTxTransaction+0x70>
        break;
 8003f3a:	bf00      	nop
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	165e9f81 	.word	0x165e9f81

08003f50 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003f58:	4b35      	ldr	r3, [pc, #212]	; (8004030 <SPI_CloseRxTx_ISR+0xe0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a35      	ldr	r2, [pc, #212]	; (8004034 <SPI_CloseRxTx_ISR+0xe4>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0a5b      	lsrs	r3, r3, #9
 8003f64:	2264      	movs	r2, #100	; 0x64
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f6c:	f7fd fa46 	bl	80013fc <HAL_GetTick>
 8003f70:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0220 	bic.w	r2, r2, #32
 8003f80:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f94:	e009      	b.n	8003faa <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0eb      	beq.n	8003f82 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	2164      	movs	r1, #100	; 0x64
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ff8c 	bl	8003ecc <SPI_EndRxTxTransaction>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f043 0220 	orr.w	r2, r3, #32
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d115      	bne.n	8004018 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d107      	bne.n	8004008 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fd39 	bl	8003a78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004006:	e00e      	b.n	8004026 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fd3b 	bl	8003a8c <HAL_SPI_TxRxCpltCallback>
}
 8004016:	e006      	b.n	8004026 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff fd3d 	bl	8003aa0 <HAL_SPI_ErrorCallback>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000000 	.word	0x20000000
 8004034:	057619f1 	.word	0x057619f1

08004038 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800404e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004050:	f7fd f9d4 	bl	80013fc <HAL_GetTick>
 8004054:	4603      	mov	r3, r0
 8004056:	461a      	mov	r2, r3
 8004058:	2164      	movs	r1, #100	; 0x64
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fed0 	bl	8003e00 <SPI_EndRxTransaction>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fce9 	bl	8003a78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80040a6:	e002      	b.n	80040ae <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fcf9 	bl	8003aa0 <HAL_SPI_ErrorCallback>
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e041      	b.n	800414c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fd f899 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 fa91 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d001      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e044      	b.n	80041f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <HAL_TIM_Base_Start_IT+0xb0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d018      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x6c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004196:	d013      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x6c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1a      	ldr	r2, [pc, #104]	; (8004208 <HAL_TIM_Base_Start_IT+0xb4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00e      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x6c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a19      	ldr	r2, [pc, #100]	; (800420c <HAL_TIM_Base_Start_IT+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x6c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a17      	ldr	r2, [pc, #92]	; (8004210 <HAL_TIM_Base_Start_IT+0xbc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x6c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a16      	ldr	r2, [pc, #88]	; (8004214 <HAL_TIM_Base_Start_IT+0xc0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d111      	bne.n	80041e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d010      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0201 	orr.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e2:	e007      	b.n	80041f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40014000 	.word	0x40014000

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d122      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d11b      	bne.n	8004274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0202 	mvn.w	r2, #2
 8004244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f9bf 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004260:	e005      	b.n	800426e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f9b1 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f9c2 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d122      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f995 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f987 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f998 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d122      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0208 	mvn.w	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f96b 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 8004308:	e005      	b.n	8004316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f95d 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f96e 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b10      	cmp	r3, #16
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b10      	cmp	r3, #16
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0210 	mvn.w	r2, #16
 8004340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2208      	movs	r2, #8
 8004346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f941 	bl	80045de <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f933 	bl	80045ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f944 	bl	80045f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10e      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
 8004394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f90d 	bl	80045b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b80      	cmp	r3, #128	; 0x80
 80043a8:	d10e      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d107      	bne.n	80043c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fabc 	bl	8004940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d10e      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d107      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f909 	bl	8004606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d10e      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d107      	bne.n	8004420 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0220 	mvn.w	r2, #32
 8004418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa86 	bl	800492c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIM_ConfigClockSource+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e0b4      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x186>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447c:	d03e      	beq.n	80044fc <HAL_TIM_ConfigClockSource+0xd4>
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004482:	f200 8087 	bhi.w	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	f000 8086 	beq.w	800459a <HAL_TIM_ConfigClockSource+0x172>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d87f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d01a      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xa6>
 8004498:	2b70      	cmp	r3, #112	; 0x70
 800449a:	d87b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d050      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x11a>
 80044a0:	2b60      	cmp	r3, #96	; 0x60
 80044a2:	d877      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d03c      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0xfa>
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d873      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d058      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x13a>
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d86f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d064      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d86b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d060      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d867      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d05a      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044cc:	e062      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f000 f997 	bl	8004810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	609a      	str	r2, [r3, #8]
      break;
 80044fa:	e04f      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6899      	ldr	r1, [r3, #8]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f000 f980 	bl	8004810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451e:	609a      	str	r2, [r3, #8]
      break;
 8004520:	e03c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f000 f8f4 	bl	800471c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2150      	movs	r1, #80	; 0x50
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f94d 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 8004540:	e02c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	461a      	mov	r2, r3
 8004550:	f000 f913 	bl	800477a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2160      	movs	r1, #96	; 0x60
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f93d 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 8004560:	e01c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	461a      	mov	r2, r3
 8004570:	f000 f8d4 	bl	800471c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f92d 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 8004580:	e00c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 f924 	bl	80047da <TIM_ITRx_SetConfig>
      break;
 8004592:	e003      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      break;
 8004598:	e000      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800459a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a34      	ldr	r2, [pc, #208]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00f      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d00b      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a31      	ldr	r2, [pc, #196]	; (8004704 <TIM_Base_SetConfig+0xe8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d007      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a30      	ldr	r2, [pc, #192]	; (8004708 <TIM_Base_SetConfig+0xec>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_Base_SetConfig+0x38>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2f      	ldr	r2, [pc, #188]	; (800470c <TIM_Base_SetConfig+0xf0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d108      	bne.n	8004666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a25      	ldr	r2, [pc, #148]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d017      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a22      	ldr	r2, [pc, #136]	; (8004704 <TIM_Base_SetConfig+0xe8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <TIM_Base_SetConfig+0xec>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <TIM_Base_SetConfig+0xf0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <TIM_Base_SetConfig+0xf4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <TIM_Base_SetConfig+0xf8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <TIM_Base_SetConfig+0xfc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a08      	ldr	r2, [pc, #32]	; (8004700 <TIM_Base_SetConfig+0xe4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]
}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40014000 	.word	0x40014000
 8004714:	40014400 	.word	0x40014400
 8004718:	40014800 	.word	0x40014800

0800471c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f023 0201 	bic.w	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f023 030a 	bic.w	r3, r3, #10
 8004758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800477a:	b480      	push	{r7}
 800477c:	b087      	sub	sp, #28
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f023 0210 	bic.w	r2, r3, #16
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f043 0307 	orr.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800482a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	021a      	lsls	r2, r3, #8
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	431a      	orrs	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4313      	orrs	r3, r2
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	609a      	str	r2, [r3, #8]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e050      	b.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d013      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a16      	ldr	r2, [pc, #88]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10c      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40014000 	.word	0x40014000

0800492c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	603a      	str	r2, [r7, #0]
 800495e:	71fb      	strb	r3, [r7, #7]
 8004960:	460b      	mov	r3, r1
 8004962:	80bb      	strh	r3, [r7, #4]
    uint16_t spiTransferSize = 3;
 8004964:	2303      	movs	r3, #3
 8004966:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800496c:	88bb      	ldrh	r3, [r7, #4]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	b29b      	uxth	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	b2db      	uxtb	r3, r3
 800497a:	3330      	adds	r3, #48	; 0x30
 800497c:	b2da      	uxtb	r2, r3
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <DRV_CANFDSPI_ReadByte+0x60>)
 8004980:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8004982:	88bb      	ldrh	r3, [r7, #4]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <DRV_CANFDSPI_ReadByte+0x60>)
 8004988:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = 0;
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <DRV_CANFDSPI_ReadByte+0x60>)
 800498c:	2200      	movs	r2, #0
 800498e:	709a      	strb	r2, [r3, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8004990:	89fb      	ldrh	r3, [r7, #14]
 8004992:	79f8      	ldrb	r0, [r7, #7]
 8004994:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <DRV_CANFDSPI_ReadByte+0x64>)
 8004996:	4907      	ldr	r1, [pc, #28]	; (80049b4 <DRV_CANFDSPI_ReadByte+0x60>)
 8004998:	f000 faba 	bl	8004f10 <DRV_SPI_TransferData>
 800499c:	4603      	mov	r3, r0
 800499e:	737b      	strb	r3, [r7, #13]

    // Update data
    *rxd = spiReceiveBuffer[2];
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <DRV_CANFDSPI_ReadByte+0x64>)
 80049a2:	789a      	ldrb	r2, [r3, #2]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80049a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000324 	.word	0x20000324
 80049b8:	20000388 	.word	0x20000388

080049bc <DRV_CANFDSPI_WriteByte>:

    return spiTransferError_ReadByte;
}

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
 80049c6:	460b      	mov	r3, r1
 80049c8:	80bb      	strh	r3, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	71bb      	strb	r3, [r7, #6]
    uint16_t spiTransferSize = 3;
 80049ce:	2303      	movs	r3, #3
 80049d0:	81fb      	strh	r3, [r7, #14]
    int8_t spiTransferError = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	737b      	strb	r3, [r7, #13]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80049d6:	88bb      	ldrh	r3, [r7, #4]
 80049d8:	0a1b      	lsrs	r3, r3, #8
 80049da:	b29b      	uxth	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	3320      	adds	r3, #32
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <DRV_CANFDSPI_WriteByte+0x5c>)
 80049ea:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80049ec:	88bb      	ldrh	r3, [r7, #4]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <DRV_CANFDSPI_WriteByte+0x5c>)
 80049f2:	705a      	strb	r2, [r3, #1]
    spiTransmitBuffer[2] = txd;
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <DRV_CANFDSPI_WriteByte+0x5c>)
 80049f6:	79bb      	ldrb	r3, [r7, #6]
 80049f8:	7093      	strb	r3, [r2, #2]

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 80049fa:	89fb      	ldrh	r3, [r7, #14]
 80049fc:	79f8      	ldrb	r0, [r7, #7]
 80049fe:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <DRV_CANFDSPI_WriteByte+0x60>)
 8004a00:	4905      	ldr	r1, [pc, #20]	; (8004a18 <DRV_CANFDSPI_WriteByte+0x5c>)
 8004a02:	f000 fa85 	bl	8004f10 <DRV_SPI_TransferData>
 8004a06:	4603      	mov	r3, r0
 8004a08:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 8004a0a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000324 	.word	0x20000324
 8004a1c:	20000388 	.word	0x20000388

08004a20 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60ba      	str	r2, [r7, #8]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	81bb      	strh	r3, [r7, #12]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	82bb      	strh	r3, [r7, #20]
    int8_t spiTransferError = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	74fb      	strb	r3, [r7, #19]

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8004a40:	89bb      	ldrh	r3, [r7, #12]
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	3320      	adds	r3, #32
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8004a54:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8004a56:	89bb      	ldrh	r3, [r7, #12]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8004a5c:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 2; i < spiTransferSize; i++) {
 8004a5e:	2302      	movs	r3, #2
 8004a60:	82fb      	strh	r3, [r7, #22]
 8004a62:	e00a      	b.n	8004a7a <DRV_CANFDSPI_WriteByteArray+0x5a>
        spiTransmitBuffer[i] = txd[i - 2];
 8004a64:	8afb      	ldrh	r3, [r7, #22]
 8004a66:	3b02      	subs	r3, #2
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	441a      	add	r2, r3
 8004a6c:	8afb      	ldrh	r3, [r7, #22]
 8004a6e:	7811      	ldrb	r1, [r2, #0]
 8004a70:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8004a72:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8004a74:	8afb      	ldrh	r3, [r7, #22]
 8004a76:	3301      	adds	r3, #1
 8004a78:	82fb      	strh	r3, [r7, #22]
 8004a7a:	8afa      	ldrh	r2, [r7, #22]
 8004a7c:	8abb      	ldrh	r3, [r7, #20]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3f0      	bcc.n	8004a64 <DRV_CANFDSPI_WriteByteArray+0x44>
    }

    spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8004a82:	8abb      	ldrh	r3, [r7, #20]
 8004a84:	7bf8      	ldrb	r0, [r7, #15]
 8004a86:	4a07      	ldr	r2, [pc, #28]	; (8004aa4 <DRV_CANFDSPI_WriteByteArray+0x84>)
 8004a88:	4905      	ldr	r1, [pc, #20]	; (8004aa0 <DRV_CANFDSPI_WriteByteArray+0x80>)
 8004a8a:	f000 fa41 	bl	8004f10 <DRV_SPI_TransferData>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	74fb      	strb	r3, [r7, #19]

    return spiTransferError;
 8004a92:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000324 	.word	0x20000324
 8004aa4:	20000388 	.word	0x20000388

08004aa8 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60ba      	str	r2, [r7, #8]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	81bb      	strh	r3, [r7, #12]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	833b      	strh	r3, [r7, #24]
    int8_t spiTransferError = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75fb      	strb	r3, [r7, #23]

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8004acc:	89bb      	ldrh	r3, [r7, #12]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	3330      	adds	r3, #48	; 0x30
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8004ae0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8004ae2:	89bb      	ldrh	r3, [r7, #12]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8004ae8:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8004aea:	2302      	movs	r3, #2
 8004aec:	83fb      	strh	r3, [r7, #30]
 8004aee:	e006      	b.n	8004afe <DRV_CANFDSPI_ReadWordArray+0x56>
        spiTransmitBuffer[i] = 0;
 8004af0:	8bfb      	ldrh	r3, [r7, #30]
 8004af2:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8004af4:	2100      	movs	r1, #0
 8004af6:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8004af8:	8bfb      	ldrh	r3, [r7, #30]
 8004afa:	3301      	adds	r3, #1
 8004afc:	83fb      	strh	r3, [r7, #30]
 8004afe:	8bfa      	ldrh	r2, [r7, #30]
 8004b00:	8b3b      	ldrh	r3, [r7, #24]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d3f4      	bcc.n	8004af0 <DRV_CANFDSPI_ReadWordArray+0x48>
    }

    spiTransferError = DRV_SPI_2_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
 8004b06:	8b3b      	ldrh	r3, [r7, #24]
 8004b08:	7bf8      	ldrb	r0, [r7, #15]
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <DRV_CANFDSPI_ReadWordArray+0xdc>)
 8004b0c:	491c      	ldr	r1, [pc, #112]	; (8004b80 <DRV_CANFDSPI_ReadWordArray+0xd8>)
 8004b0e:	f000 fa37 	bl	8004f80 <DRV_SPI_2_TransferData>
 8004b12:	4603      	mov	r3, r0
 8004b14:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <DRV_CANFDSPI_ReadWordArray+0x7c>
        return spiTransferError;
 8004b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b22:	e029      	b.n	8004b78 <DRV_CANFDSPI_ReadWordArray+0xd0>
    }

    // Convert Byte array to Word array
    n = 2;
 8004b24:	2302      	movs	r3, #2
 8004b26:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8004b28:	2300      	movs	r3, #0
 8004b2a:	83fb      	strh	r3, [r7, #30]
 8004b2c:	e01e      	b.n	8004b6c <DRV_CANFDSPI_ReadWordArray+0xc4>
        w.word = 0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8004b32:	2300      	movs	r3, #0
 8004b34:	83bb      	strh	r3, [r7, #28]
 8004b36:	e00d      	b.n	8004b54 <DRV_CANFDSPI_ReadWordArray+0xac>
            w.byte[j] = spiReceiveBuffer[n];
 8004b38:	8b7a      	ldrh	r2, [r7, #26]
 8004b3a:	8bbb      	ldrh	r3, [r7, #28]
 8004b3c:	4911      	ldr	r1, [pc, #68]	; (8004b84 <DRV_CANFDSPI_ReadWordArray+0xdc>)
 8004b3e:	5c8a      	ldrb	r2, [r1, r2]
 8004b40:	3320      	adds	r3, #32
 8004b42:	443b      	add	r3, r7
 8004b44:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8004b48:	8bbb      	ldrh	r3, [r7, #28]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	83bb      	strh	r3, [r7, #28]
 8004b4e:	8b7b      	ldrh	r3, [r7, #26]
 8004b50:	3301      	adds	r3, #1
 8004b52:	837b      	strh	r3, [r7, #26]
 8004b54:	8bbb      	ldrh	r3, [r7, #28]
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d9ee      	bls.n	8004b38 <DRV_CANFDSPI_ReadWordArray+0x90>
        }
        rxd[i] = w.word;
 8004b5a:	8bfb      	ldrh	r3, [r7, #30]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	4413      	add	r3, r2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8004b66:	8bfb      	ldrh	r3, [r7, #30]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	83fb      	strh	r3, [r7, #30]
 8004b6c:	8bfa      	ldrh	r2, [r7, #30]
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d3dc      	bcc.n	8004b2e <DRV_CANFDSPI_ReadWordArray+0x86>
    }

    return spiTransferError;
 8004b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000324 	.word	0x20000324
 8004b84:	20000388 	.word	0x20000388

08004b88 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b0a0      	sub	sp, #128	; 0x80
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60ba      	str	r2, [r7, #8]
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	4603      	mov	r3, r0
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	460b      	mov	r3, r1
 8004b98:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8004ba0:	7bbb      	ldrb	r3, [r7, #14]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	0052      	lsls	r2, r2, #1
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3350      	adds	r3, #80	; 0x50
 8004bb0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8004bb4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004bb8:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8004bbc:	7bf8      	ldrb	r0, [r7, #15]
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	f7ff ff72 	bl	8004aa8 <DRV_CANFDSPI_ReadWordArray>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8004bca:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	e0c5      	b.n	8004d64 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8004bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bda:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8004bdc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8004be0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8004bea:	f06f 0301 	mvn.w	r3, #1
 8004bee:	e0b9      	b.n	8004d64 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f920 	bl	8004e40 <DRV_CANFDSPI_DlcToDataBytes>
 8004c00:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8004c02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d202      	bcs.n	8004c12 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8004c0c:	f06f 0302 	mvn.w	r3, #2
 8004c10:	e0a8      	b.n	8004d64 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8004c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c14:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8004c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c18:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8004c1a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8004c28:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8004c2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c30:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];
//    uint8_t rxBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	789b      	ldrb	r3, [r3, #2]
 8004c44:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	78db      	ldrb	r3, [r3, #3]
 8004c4a:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	791b      	ldrb	r3, [r3, #4]
 8004c50:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	795b      	ldrb	r3, [r3, #5]
 8004c56:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	799b      	ldrb	r3, [r3, #6]
 8004c5c:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	79db      	ldrb	r3, [r3, #7]
 8004c62:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c6a:	e010      	b.n	8004c8e <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8004c6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	441a      	add	r2, r3
 8004c74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c78:	3308      	adds	r3, #8
 8004c7a:	7812      	ldrb	r2, [r2, #0]
 8004c7c:	3380      	adds	r3, #128	; 0x80
 8004c7e:	443b      	add	r3, r7
 8004c80:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8004c84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004c8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004c92:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d8e8      	bhi.n	8004c6c <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8004ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d02b      	beq.n	8004d0a <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8004cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f1c3 0304 	rsb	r3, r3, #4
 8004cc2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8004cc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	3308      	adds	r3, #8
 8004cce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004cd8:	e010      	b.n	8004cfc <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8004cda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004cde:	f103 0208 	add.w	r2, r3, #8
 8004ce2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3380      	adds	r3, #128	; 0x80
 8004cea:	443b      	add	r3, r7
 8004cec:	2200      	movs	r2, #0
 8004cee:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8004cf2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8004cfc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d8e7      	bhi.n	8004cda <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8004d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004d14:	4413      	add	r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3308      	adds	r3, #8
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f107 0210 	add.w	r2, r7, #16
 8004d20:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8004d24:	7bf8      	ldrb	r0, [r7, #15]
 8004d26:	f7ff fe7b 	bl	8004a20 <DRV_CANFDSPI_WriteByteArray>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8004d30:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8004d38:	f06f 0303 	mvn.w	r3, #3
 8004d3c:	e012      	b.n	8004d64 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    //test
    //DRV_CANFDSPI_ReadByteArray(index, a, rxBuffer, txdNumBytes + 8 + n);
    //test

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8004d3e:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8004d42:	7bb9      	ldrb	r1, [r7, #14]
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f810 	bl	8004d6c <DRV_CANFDSPI_TransmitChannelUpdate>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8004d52:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 8004d5a:	f06f 0304 	mvn.w	r3, #4
 8004d5e:	e001      	b.n	8004d64 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8004d60:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3780      	adds	r7, #128	; 0x80
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	71fb      	strb	r3, [r7, #7]
 8004d76:	460b      	mov	r3, r1
 8004d78:	71bb      	strb	r3, [r7, #6]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8004d82:	79bb      	ldrb	r3, [r7, #6]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	0052      	lsls	r2, r2, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3351      	adds	r3, #81	; 0x51
 8004d92:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8004d98:	7a7b      	ldrb	r3, [r7, #9]
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8004da0:	797b      	ldrb	r3, [r7, #5]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8004da6:	7a7b      	ldrb	r3, [r7, #9]
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8004dae:	7a7a      	ldrb	r2, [r7, #9]
 8004db0:	89b9      	ldrh	r1, [r7, #12]
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fe01 	bl	80049bc <DRV_CANFDSPI_WriteByte>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	e001      	b.n	8004dd0 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 8004dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	603a      	str	r2, [r7, #0]
 8004de2:	71fb      	strb	r3, [r7, #7]
 8004de4:	460b      	mov	r3, r1
 8004de6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8004df4:	79bb      	ldrb	r3, [r7, #6]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	0052      	lsls	r2, r2, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3354      	adds	r3, #84	; 0x54
 8004e04:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8004e06:	f107 0208 	add.w	r2, r7, #8
 8004e0a:	89b9      	ldrh	r1, [r7, #12]
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fda0 	bl	8004954 <DRV_CANFDSPI_ReadByte>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8004e20:	f04f 33ff 	mov.w	r3, #4294967295
 8004e24:	e007      	b.n	8004e36 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8004e26:	7a3b      	ldrb	r3, [r7, #8]
 8004e28:	f003 0317 	and.w	r3, r3, #23
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8004e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
	
//    Nop();
//    Nop();

    if (dlc < CAN_DLC_12) {
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d802      	bhi.n	8004e5a <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e02a      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	3b09      	subs	r3, #9
 8004e5e:	2b06      	cmp	r3, #6
 8004e60:	d825      	bhi.n	8004eae <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e85 	.word	0x08004e85
 8004e6c:	08004e8b 	.word	0x08004e8b
 8004e70:	08004e91 	.word	0x08004e91
 8004e74:	08004e97 	.word	0x08004e97
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004ea9 	.word	0x08004ea9
            case CAN_DLC_12:
                dataBytesInObject = 12;
 8004e84:	230c      	movs	r3, #12
 8004e86:	60fb      	str	r3, [r7, #12]
                break;
 8004e88:	e012      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	60fb      	str	r3, [r7, #12]
                break;
 8004e8e:	e00f      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8004e90:	2314      	movs	r3, #20
 8004e92:	60fb      	str	r3, [r7, #12]
                break;
 8004e94:	e00c      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 8004e96:	2318      	movs	r3, #24
 8004e98:	60fb      	str	r3, [r7, #12]
                break;
 8004e9a:	e009      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	60fb      	str	r3, [r7, #12]
                break;
 8004ea0:	e006      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 8004ea2:	2330      	movs	r3, #48	; 0x30
 8004ea4:	60fb      	str	r3, [r7, #12]
                break;
 8004ea6:	e003      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8004ea8:	2340      	movs	r3, #64	; 0x40
 8004eaa:	60fb      	str	r3, [r7, #12]
                break;
 8004eac:	e000      	b.n	8004eb0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8004eae:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <DRV_SPI_ChipSelectAssert>:
  * @param  spiSlaveDeviceIndex: ��·SPIѡ��Ҫ����оƬ�ͺ����жϿɳ���·
  * @param  assert: �Ƿ�ѡ��ģ�顣true�������ͣ�false��������
  * @retval -1����Ƭѡʧ�ܣ�0����Ƭѡ���
  */
int8_t DRV_SPI_ChipSelectAssert(uint8_t spiSlaveDeviceIndex, bool assert)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	460a      	mov	r2, r1
 8004eca:	71fb      	strb	r3, [r7, #7]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71bb      	strb	r3, [r7, #6]
    int8_t error = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]

    // Select Chip Select
    switch (spiSlaveDeviceIndex) {
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10e      	bne.n	8004ef8 <DRV_SPI_ChipSelectAssert+0x38>
        case DRV_CANFDSPI_INDEX_0:
            if (assert)
 8004eda:	79bb      	ldrb	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <DRV_SPI_ChipSelectAssert+0x2c>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2110      	movs	r1, #16
 8004ee4:	4809      	ldr	r0, [pc, #36]	; (8004f0c <DRV_SPI_ChipSelectAssert+0x4c>)
 8004ee6:	f7fc fd71 	bl	80019cc <HAL_GPIO_WritePin>
            else
                HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
            break;
 8004eea:	e008      	b.n	8004efe <DRV_SPI_ChipSelectAssert+0x3e>
                HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 8004eec:	2201      	movs	r2, #1
 8004eee:	2110      	movs	r1, #16
 8004ef0:	4806      	ldr	r0, [pc, #24]	; (8004f0c <DRV_SPI_ChipSelectAssert+0x4c>)
 8004ef2:	f7fc fd6b 	bl	80019cc <HAL_GPIO_WritePin>
            break;
 8004ef6:	e002      	b.n	8004efe <DRV_SPI_ChipSelectAssert+0x3e>
        default:
            error = -1;
 8004ef8:	23ff      	movs	r3, #255	; 0xff
 8004efa:	73fb      	strb	r3, [r7, #15]
            break;
 8004efc:	bf00      	nop
    }
    return error;
 8004efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40020000 	.word	0x40020000

08004f10 <DRV_SPI_TransferData>:
  * @param  SpiRxData: ���յ�����
  * @param  spiTransferSize: �������ݵĳ���
  * @retval Ƭѡ�ź�״̬  -1����Ƭѡʧ�ܣ�0����Ƭѡ�ɹ�
  */
int8_t DRV_SPI_TransferData(uint8_t spiSlaveDeviceIndex, uint8_t *SpiTxData, uint8_t *SpiRxData, uint16_t spiTransferSize)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]
 8004f20:	4613      	mov	r3, r2
 8004f22:	81bb      	strh	r3, [r7, #12]
    int8_t error = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
    // Assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, true);
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff ffc7 	bl	8004ec0 <DRV_SPI_ChipSelectAssert>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]
    if (error != 0)
 8004f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <DRV_SPI_TransferData+0x34>
        return error;
 8004f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f42:	e016      	b.n	8004f72 <DRV_SPI_TransferData+0x62>

    switch (spiSlaveDeviceIndex){
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <DRV_SPI_TransferData+0x4e>
        case DRV_CANFDSPI_INDEX_0:
            HAL_SPI_TransmitReceive(&hspi1,SpiTxData,SpiRxData,spiTransferSize,1000);
 8004f4a:	89bb      	ldrh	r3, [r7, #12]
 8004f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f50:	9200      	str	r2, [sp, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	4809      	ldr	r0, [pc, #36]	; (8004f7c <DRV_SPI_TransferData+0x6c>)
 8004f58:	f7fe f9c5 	bl	80032e6 <HAL_SPI_TransmitReceive>
            break;
 8004f5c:	e000      	b.n	8004f60 <DRV_SPI_TransferData+0x50>
        default:
            break;
 8004f5e:	bf00      	nop
    }
    // De�\assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, false);
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ffab 	bl	8004ec0 <DRV_SPI_ChipSelectAssert>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	75fb      	strb	r3, [r7, #23]

    return error;
 8004f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
} 
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000190 	.word	0x20000190

08004f80 <DRV_SPI_2_TransferData>:

int8_t DRV_SPI_2_TransferData(uint8_t spiSlaveDeviceIndex, uint8_t *SpiTxData, uint8_t *SpiRxData, uint16_t spiTransferSize)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	4613      	mov	r3, r2
 8004f92:	81bb      	strh	r3, [r7, #12]
    int8_t error = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	75fb      	strb	r3, [r7, #23]
    // Assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, true);
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff8f 	bl	8004ec0 <DRV_SPI_ChipSelectAssert>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]
    if (error != 0)
 8004fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <DRV_SPI_2_TransferData+0x34>
        return error;
 8004fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fb2:	e016      	b.n	8004fe2 <DRV_SPI_2_TransferData+0x62>

    switch (spiSlaveDeviceIndex){
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <DRV_SPI_2_TransferData+0x4e>
        case DRV_CANFDSPI_INDEX_0:
            HAL_SPI_TransmitReceive(&hspi4,SpiTxData,SpiRxData,spiTransferSize,1000);
 8004fba:	89bb      	ldrh	r3, [r7, #12]
 8004fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fc0:	9200      	str	r2, [sp, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4809      	ldr	r0, [pc, #36]	; (8004fec <DRV_SPI_2_TransferData+0x6c>)
 8004fc8:	f7fe f98d 	bl	80032e6 <HAL_SPI_TransmitReceive>
            break;
 8004fcc:	e000      	b.n	8004fd0 <DRV_SPI_2_TransferData+0x50>
        default:
            break;
 8004fce:	bf00      	nop
    }
    // De�\assert CS
    error = DRV_SPI_ChipSelectAssert(spiSlaveDeviceIndex, false);
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff73 	bl	8004ec0 <DRV_SPI_ChipSelectAssert>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	75fb      	strb	r3, [r7, #23]

    return error;
 8004fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	200001e8 	.word	0x200001e8

08004ff0 <mcp2518fd_transmit>:
		DRV_CANFDSPI_EccEventClear(DRV_CANFDSPI_INDEX_0, CAN_ECC_ALL_EVENTS);
		DRV_CANFDSPI_ModuleEventClear(DRV_CANFDSPI_INDEX_0, CAN_ALL_EVENTS);
}

CAN_TX_MSGOBJ txObj;
void mcp2518fd_transmit(void) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af02      	add	r7, sp, #8
//	uint8_t attempts = 50;
	uint8_t n;
	int16_t i;
	bool flush = true;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	717b      	strb	r3, [r7, #5]
	static uint16_t messageID_add = 0;

    /**********************Prepare Data****************************************/
//    Nop();
//    Nop();
    txObj.bF.id.SID = 0x300 + ((messageID_add++) & 0xF);
 8004ffa:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <mcp2518fd_transmit+0xe4>)
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	b291      	uxth	r1, r2
 8005002:	4a34      	ldr	r2, [pc, #208]	; (80050d4 <mcp2518fd_transmit+0xe4>)
 8005004:	8011      	strh	r1, [r2, #0]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	b29b      	uxth	r3, r3
 800500c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005010:	b29b      	uxth	r3, r3
 8005012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005016:	b299      	uxth	r1, r3
 8005018:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 800501a:	8813      	ldrh	r3, [r2, #0]
 800501c:	f361 030a 	bfi	r3, r1, #0, #11
 8005020:	8013      	strh	r3, [r2, #0]

    txObj.bF.ctrl.DLC = CAN_DLC_64;
 8005022:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 8005024:	7913      	ldrb	r3, [r2, #4]
 8005026:	f043 030f 	orr.w	r3, r3, #15
 800502a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 0; //0: standard frame | 1: extended frame
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 800502e:	7913      	ldrb	r3, [r2, #4]
 8005030:	f36f 1304 	bfc	r3, #4, #1
 8005034:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.BRS = 1; //switch bit rate
 8005036:	4a28      	ldr	r2, [pc, #160]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 8005038:	7913      	ldrb	r3, [r2, #4]
 800503a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800503e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 1; //1: CAN FD frame | 0: CAN frame
 8005040:	4a25      	ldr	r2, [pc, #148]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 8005042:	7913      	ldrb	r3, [r2, #4]
 8005044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005048:	7113      	strb	r3, [r2, #4]

    n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj.bF.ctrl.DLC);
 800504a:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 800504c:	791b      	ldrb	r3, [r3, #4]
 800504e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005052:	b2db      	uxtb	r3, r3
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fef3 	bl	8004e40 <DRV_CANFDSPI_DlcToDataBytes>
 800505a:	4603      	mov	r3, r0
 800505c:	713b      	strb	r3, [r7, #4]
    //create random data with size of buffer = size of DLC
    for (i = 0; i < n; i++)
 800505e:	2300      	movs	r3, #0
 8005060:	80fb      	strh	r3, [r7, #6]
 8005062:	e00d      	b.n	8005080 <mcp2518fd_transmit+0x90>
    {
        txd[i] = rand() & 0xff;
 8005064:	f000 f840 	bl	80050e8 <rand>
 8005068:	4602      	mov	r2, r0
 800506a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800506e:	b2d1      	uxtb	r1, r2
 8005070:	4a1a      	ldr	r2, [pc, #104]	; (80050dc <mcp2518fd_transmit+0xec>)
 8005072:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < n; i++)
 8005074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005078:	b29b      	uxth	r3, r3
 800507a:	3301      	adds	r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	80fb      	strh	r3, [r7, #6]
 8005080:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005084:	793b      	ldrb	r3, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	dbec      	blt.n	8005064 <mcp2518fd_transmit+0x74>
    }

    DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <mcp2518fd_transmit+0xf0>)
 800508c:	2102      	movs	r1, #2
 800508e:	2000      	movs	r0, #0
 8005090:	f7ff fea2 	bl	8004dd8 <DRV_CANFDSPI_TransmitChannelEventGet>
    if (txFlags & CAN_TX_FIFO_NOT_FULL_EVENT) {
 8005094:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <mcp2518fd_transmit+0xf0>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d015      	beq.n	80050cc <mcp2518fd_transmit+0xdc>
    	DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, flush);
 80050a0:	793b      	ldrb	r3, [r7, #4]
 80050a2:	797a      	ldrb	r2, [r7, #5]
 80050a4:	9201      	str	r2, [sp, #4]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <mcp2518fd_transmit+0xec>)
 80050aa:	4a0b      	ldr	r2, [pc, #44]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 80050ac:	2102      	movs	r1, #2
 80050ae:	2000      	movs	r0, #0
 80050b0:	f7ff fd6a 	bl	8004b88 <DRV_CANFDSPI_TransmitChannelLoad>
    	printf("\r\n Transmit message's ID = %04x, and txd[0] = %02x", txObj.bF.id.SID, txd[0]);
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <mcp2518fd_transmit+0xe8>)
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050bc:	b29b      	uxth	r3, r3
 80050be:	4619      	mov	r1, r3
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <mcp2518fd_transmit+0xec>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4807      	ldr	r0, [pc, #28]	; (80050e4 <mcp2518fd_transmit+0xf4>)
 80050c8:	f000 f8fc 	bl	80052c4 <iprintf>
    }
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	2000043c 	.word	0x2000043c
 80050d8:	200003f0 	.word	0x200003f0
 80050dc:	200003fc 	.word	0x200003fc
 80050e0:	200003ec 	.word	0x200003ec
 80050e4:	080061b0 	.word	0x080061b0

080050e8 <rand>:
 80050e8:	4b16      	ldr	r3, [pc, #88]	; (8005144 <rand+0x5c>)
 80050ea:	b510      	push	{r4, lr}
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050f0:	b9b3      	cbnz	r3, 8005120 <rand+0x38>
 80050f2:	2018      	movs	r0, #24
 80050f4:	f000 fa20 	bl	8005538 <malloc>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6320      	str	r0, [r4, #48]	; 0x30
 80050fc:	b920      	cbnz	r0, 8005108 <rand+0x20>
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <rand+0x60>)
 8005100:	4812      	ldr	r0, [pc, #72]	; (800514c <rand+0x64>)
 8005102:	2152      	movs	r1, #82	; 0x52
 8005104:	f000 f9ae 	bl	8005464 <__assert_func>
 8005108:	4911      	ldr	r1, [pc, #68]	; (8005150 <rand+0x68>)
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <rand+0x6c>)
 800510c:	e9c0 1300 	strd	r1, r3, [r0]
 8005110:	4b11      	ldr	r3, [pc, #68]	; (8005158 <rand+0x70>)
 8005112:	6083      	str	r3, [r0, #8]
 8005114:	230b      	movs	r3, #11
 8005116:	8183      	strh	r3, [r0, #12]
 8005118:	2100      	movs	r1, #0
 800511a:	2001      	movs	r0, #1
 800511c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005120:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005122:	480e      	ldr	r0, [pc, #56]	; (800515c <rand+0x74>)
 8005124:	690b      	ldr	r3, [r1, #16]
 8005126:	694c      	ldr	r4, [r1, #20]
 8005128:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <rand+0x78>)
 800512a:	4358      	muls	r0, r3
 800512c:	fb02 0004 	mla	r0, r2, r4, r0
 8005130:	fba3 3202 	umull	r3, r2, r3, r2
 8005134:	3301      	adds	r3, #1
 8005136:	eb40 0002 	adc.w	r0, r0, r2
 800513a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800513e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005142:	bd10      	pop	{r4, pc}
 8005144:	20000064 	.word	0x20000064
 8005148:	08006230 	.word	0x08006230
 800514c:	08006247 	.word	0x08006247
 8005150:	abcd330e 	.word	0xabcd330e
 8005154:	e66d1234 	.word	0xe66d1234
 8005158:	0005deec 	.word	0x0005deec
 800515c:	5851f42d 	.word	0x5851f42d
 8005160:	4c957f2d 	.word	0x4c957f2d

08005164 <std>:
 8005164:	2300      	movs	r3, #0
 8005166:	b510      	push	{r4, lr}
 8005168:	4604      	mov	r4, r0
 800516a:	e9c0 3300 	strd	r3, r3, [r0]
 800516e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005172:	6083      	str	r3, [r0, #8]
 8005174:	8181      	strh	r1, [r0, #12]
 8005176:	6643      	str	r3, [r0, #100]	; 0x64
 8005178:	81c2      	strh	r2, [r0, #14]
 800517a:	6183      	str	r3, [r0, #24]
 800517c:	4619      	mov	r1, r3
 800517e:	2208      	movs	r2, #8
 8005180:	305c      	adds	r0, #92	; 0x5c
 8005182:	f000 f8f4 	bl	800536e <memset>
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <std+0x38>)
 8005188:	6263      	str	r3, [r4, #36]	; 0x24
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <std+0x3c>)
 800518c:	62a3      	str	r3, [r4, #40]	; 0x28
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <std+0x40>)
 8005190:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <std+0x44>)
 8005194:	6224      	str	r4, [r4, #32]
 8005196:	6323      	str	r3, [r4, #48]	; 0x30
 8005198:	bd10      	pop	{r4, pc}
 800519a:	bf00      	nop
 800519c:	080052e9 	.word	0x080052e9
 80051a0:	0800530b 	.word	0x0800530b
 80051a4:	08005343 	.word	0x08005343
 80051a8:	08005367 	.word	0x08005367

080051ac <stdio_exit_handler>:
 80051ac:	4a02      	ldr	r2, [pc, #8]	; (80051b8 <stdio_exit_handler+0xc>)
 80051ae:	4903      	ldr	r1, [pc, #12]	; (80051bc <stdio_exit_handler+0x10>)
 80051b0:	4803      	ldr	r0, [pc, #12]	; (80051c0 <stdio_exit_handler+0x14>)
 80051b2:	f000 b869 	b.w	8005288 <_fwalk_sglue>
 80051b6:	bf00      	nop
 80051b8:	2000000c 	.word	0x2000000c
 80051bc:	08005d55 	.word	0x08005d55
 80051c0:	20000018 	.word	0x20000018

080051c4 <cleanup_stdio>:
 80051c4:	6841      	ldr	r1, [r0, #4]
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <cleanup_stdio+0x34>)
 80051c8:	4299      	cmp	r1, r3
 80051ca:	b510      	push	{r4, lr}
 80051cc:	4604      	mov	r4, r0
 80051ce:	d001      	beq.n	80051d4 <cleanup_stdio+0x10>
 80051d0:	f000 fdc0 	bl	8005d54 <_fflush_r>
 80051d4:	68a1      	ldr	r1, [r4, #8]
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <cleanup_stdio+0x38>)
 80051d8:	4299      	cmp	r1, r3
 80051da:	d002      	beq.n	80051e2 <cleanup_stdio+0x1e>
 80051dc:	4620      	mov	r0, r4
 80051de:	f000 fdb9 	bl	8005d54 <_fflush_r>
 80051e2:	68e1      	ldr	r1, [r4, #12]
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <cleanup_stdio+0x3c>)
 80051e6:	4299      	cmp	r1, r3
 80051e8:	d004      	beq.n	80051f4 <cleanup_stdio+0x30>
 80051ea:	4620      	mov	r0, r4
 80051ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f0:	f000 bdb0 	b.w	8005d54 <_fflush_r>
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	bf00      	nop
 80051f8:	20000440 	.word	0x20000440
 80051fc:	200004a8 	.word	0x200004a8
 8005200:	20000510 	.word	0x20000510

08005204 <global_stdio_init.part.0>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <global_stdio_init.part.0+0x30>)
 8005208:	4c0b      	ldr	r4, [pc, #44]	; (8005238 <global_stdio_init.part.0+0x34>)
 800520a:	4a0c      	ldr	r2, [pc, #48]	; (800523c <global_stdio_init.part.0+0x38>)
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	4620      	mov	r0, r4
 8005210:	2200      	movs	r2, #0
 8005212:	2104      	movs	r1, #4
 8005214:	f7ff ffa6 	bl	8005164 <std>
 8005218:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800521c:	2201      	movs	r2, #1
 800521e:	2109      	movs	r1, #9
 8005220:	f7ff ffa0 	bl	8005164 <std>
 8005224:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005228:	2202      	movs	r2, #2
 800522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800522e:	2112      	movs	r1, #18
 8005230:	f7ff bf98 	b.w	8005164 <std>
 8005234:	20000578 	.word	0x20000578
 8005238:	20000440 	.word	0x20000440
 800523c:	080051ad 	.word	0x080051ad

08005240 <__sfp_lock_acquire>:
 8005240:	4801      	ldr	r0, [pc, #4]	; (8005248 <__sfp_lock_acquire+0x8>)
 8005242:	f000 b90d 	b.w	8005460 <__retarget_lock_acquire_recursive>
 8005246:	bf00      	nop
 8005248:	20000581 	.word	0x20000581

0800524c <__sfp_lock_release>:
 800524c:	4801      	ldr	r0, [pc, #4]	; (8005254 <__sfp_lock_release+0x8>)
 800524e:	f000 b908 	b.w	8005462 <__retarget_lock_release_recursive>
 8005252:	bf00      	nop
 8005254:	20000581 	.word	0x20000581

08005258 <__sinit>:
 8005258:	b510      	push	{r4, lr}
 800525a:	4604      	mov	r4, r0
 800525c:	f7ff fff0 	bl	8005240 <__sfp_lock_acquire>
 8005260:	6a23      	ldr	r3, [r4, #32]
 8005262:	b11b      	cbz	r3, 800526c <__sinit+0x14>
 8005264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005268:	f7ff bff0 	b.w	800524c <__sfp_lock_release>
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <__sinit+0x28>)
 800526e:	6223      	str	r3, [r4, #32]
 8005270:	4b04      	ldr	r3, [pc, #16]	; (8005284 <__sinit+0x2c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f5      	bne.n	8005264 <__sinit+0xc>
 8005278:	f7ff ffc4 	bl	8005204 <global_stdio_init.part.0>
 800527c:	e7f2      	b.n	8005264 <__sinit+0xc>
 800527e:	bf00      	nop
 8005280:	080051c5 	.word	0x080051c5
 8005284:	20000578 	.word	0x20000578

08005288 <_fwalk_sglue>:
 8005288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800528c:	4607      	mov	r7, r0
 800528e:	4688      	mov	r8, r1
 8005290:	4614      	mov	r4, r2
 8005292:	2600      	movs	r6, #0
 8005294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005298:	f1b9 0901 	subs.w	r9, r9, #1
 800529c:	d505      	bpl.n	80052aa <_fwalk_sglue+0x22>
 800529e:	6824      	ldr	r4, [r4, #0]
 80052a0:	2c00      	cmp	r4, #0
 80052a2:	d1f7      	bne.n	8005294 <_fwalk_sglue+0xc>
 80052a4:	4630      	mov	r0, r6
 80052a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052aa:	89ab      	ldrh	r3, [r5, #12]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d907      	bls.n	80052c0 <_fwalk_sglue+0x38>
 80052b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052b4:	3301      	adds	r3, #1
 80052b6:	d003      	beq.n	80052c0 <_fwalk_sglue+0x38>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4638      	mov	r0, r7
 80052bc:	47c0      	blx	r8
 80052be:	4306      	orrs	r6, r0
 80052c0:	3568      	adds	r5, #104	; 0x68
 80052c2:	e7e9      	b.n	8005298 <_fwalk_sglue+0x10>

080052c4 <iprintf>:
 80052c4:	b40f      	push	{r0, r1, r2, r3}
 80052c6:	b507      	push	{r0, r1, r2, lr}
 80052c8:	4906      	ldr	r1, [pc, #24]	; (80052e4 <iprintf+0x20>)
 80052ca:	ab04      	add	r3, sp, #16
 80052cc:	6808      	ldr	r0, [r1, #0]
 80052ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d2:	6881      	ldr	r1, [r0, #8]
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	f000 fa0d 	bl	80056f4 <_vfiprintf_r>
 80052da:	b003      	add	sp, #12
 80052dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052e0:	b004      	add	sp, #16
 80052e2:	4770      	bx	lr
 80052e4:	20000064 	.word	0x20000064

080052e8 <__sread>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	460c      	mov	r4, r1
 80052ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f0:	f000 f868 	bl	80053c4 <_read_r>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	bfab      	itete	ge
 80052f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052fa:	89a3      	ldrhlt	r3, [r4, #12]
 80052fc:	181b      	addge	r3, r3, r0
 80052fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005302:	bfac      	ite	ge
 8005304:	6563      	strge	r3, [r4, #84]	; 0x54
 8005306:	81a3      	strhlt	r3, [r4, #12]
 8005308:	bd10      	pop	{r4, pc}

0800530a <__swrite>:
 800530a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530e:	461f      	mov	r7, r3
 8005310:	898b      	ldrh	r3, [r1, #12]
 8005312:	05db      	lsls	r3, r3, #23
 8005314:	4605      	mov	r5, r0
 8005316:	460c      	mov	r4, r1
 8005318:	4616      	mov	r6, r2
 800531a:	d505      	bpl.n	8005328 <__swrite+0x1e>
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	2302      	movs	r3, #2
 8005322:	2200      	movs	r2, #0
 8005324:	f000 f83c 	bl	80053a0 <_lseek_r>
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800532e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005332:	81a3      	strh	r3, [r4, #12]
 8005334:	4632      	mov	r2, r6
 8005336:	463b      	mov	r3, r7
 8005338:	4628      	mov	r0, r5
 800533a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	f000 b853 	b.w	80053e8 <_write_r>

08005342 <__sseek>:
 8005342:	b510      	push	{r4, lr}
 8005344:	460c      	mov	r4, r1
 8005346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534a:	f000 f829 	bl	80053a0 <_lseek_r>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	89a3      	ldrh	r3, [r4, #12]
 8005352:	bf15      	itete	ne
 8005354:	6560      	strne	r0, [r4, #84]	; 0x54
 8005356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800535a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800535e:	81a3      	strheq	r3, [r4, #12]
 8005360:	bf18      	it	ne
 8005362:	81a3      	strhne	r3, [r4, #12]
 8005364:	bd10      	pop	{r4, pc}

08005366 <__sclose>:
 8005366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536a:	f000 b809 	b.w	8005380 <_close_r>

0800536e <memset>:
 800536e:	4402      	add	r2, r0
 8005370:	4603      	mov	r3, r0
 8005372:	4293      	cmp	r3, r2
 8005374:	d100      	bne.n	8005378 <memset+0xa>
 8005376:	4770      	bx	lr
 8005378:	f803 1b01 	strb.w	r1, [r3], #1
 800537c:	e7f9      	b.n	8005372 <memset+0x4>
	...

08005380 <_close_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d06      	ldr	r5, [pc, #24]	; (800539c <_close_r+0x1c>)
 8005384:	2300      	movs	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	f7fb fe2f 	bl	8000fee <_close>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_close_r+0x1a>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_close_r+0x1a>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	2000057c 	.word	0x2000057c

080053a0 <_lseek_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	; (80053c0 <_lseek_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fb fe44 	bl	800103c <_lseek>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_lseek_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_lseek_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	2000057c 	.word	0x2000057c

080053c4 <_read_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d07      	ldr	r5, [pc, #28]	; (80053e4 <_read_r+0x20>)
 80053c8:	4604      	mov	r4, r0
 80053ca:	4608      	mov	r0, r1
 80053cc:	4611      	mov	r1, r2
 80053ce:	2200      	movs	r2, #0
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fb fdd2 	bl	8000f7c <_read>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_read_r+0x1e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_read_r+0x1e>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	2000057c 	.word	0x2000057c

080053e8 <_write_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d07      	ldr	r5, [pc, #28]	; (8005408 <_write_r+0x20>)
 80053ec:	4604      	mov	r4, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	602a      	str	r2, [r5, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fb fddd 	bl	8000fb6 <_write>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_write_r+0x1e>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_write_r+0x1e>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	2000057c 	.word	0x2000057c

0800540c <__errno>:
 800540c:	4b01      	ldr	r3, [pc, #4]	; (8005414 <__errno+0x8>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000064 	.word	0x20000064

08005418 <__libc_init_array>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4d0d      	ldr	r5, [pc, #52]	; (8005450 <__libc_init_array+0x38>)
 800541c:	4c0d      	ldr	r4, [pc, #52]	; (8005454 <__libc_init_array+0x3c>)
 800541e:	1b64      	subs	r4, r4, r5
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	2600      	movs	r6, #0
 8005424:	42a6      	cmp	r6, r4
 8005426:	d109      	bne.n	800543c <__libc_init_array+0x24>
 8005428:	4d0b      	ldr	r5, [pc, #44]	; (8005458 <__libc_init_array+0x40>)
 800542a:	4c0c      	ldr	r4, [pc, #48]	; (800545c <__libc_init_array+0x44>)
 800542c:	f000 fe42 	bl	80060b4 <_init>
 8005430:	1b64      	subs	r4, r4, r5
 8005432:	10a4      	asrs	r4, r4, #2
 8005434:	2600      	movs	r6, #0
 8005436:	42a6      	cmp	r6, r4
 8005438:	d105      	bne.n	8005446 <__libc_init_array+0x2e>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005440:	4798      	blx	r3
 8005442:	3601      	adds	r6, #1
 8005444:	e7ee      	b.n	8005424 <__libc_init_array+0xc>
 8005446:	f855 3b04 	ldr.w	r3, [r5], #4
 800544a:	4798      	blx	r3
 800544c:	3601      	adds	r6, #1
 800544e:	e7f2      	b.n	8005436 <__libc_init_array+0x1e>
 8005450:	08006318 	.word	0x08006318
 8005454:	08006318 	.word	0x08006318
 8005458:	08006318 	.word	0x08006318
 800545c:	0800631c 	.word	0x0800631c

08005460 <__retarget_lock_acquire_recursive>:
 8005460:	4770      	bx	lr

08005462 <__retarget_lock_release_recursive>:
 8005462:	4770      	bx	lr

08005464 <__assert_func>:
 8005464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005466:	4614      	mov	r4, r2
 8005468:	461a      	mov	r2, r3
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <__assert_func+0x2c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4605      	mov	r5, r0
 8005470:	68d8      	ldr	r0, [r3, #12]
 8005472:	b14c      	cbz	r4, 8005488 <__assert_func+0x24>
 8005474:	4b07      	ldr	r3, [pc, #28]	; (8005494 <__assert_func+0x30>)
 8005476:	9100      	str	r1, [sp, #0]
 8005478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800547c:	4906      	ldr	r1, [pc, #24]	; (8005498 <__assert_func+0x34>)
 800547e:	462b      	mov	r3, r5
 8005480:	f000 fc90 	bl	8005da4 <fiprintf>
 8005484:	f000 fd46 	bl	8005f14 <abort>
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <__assert_func+0x38>)
 800548a:	461c      	mov	r4, r3
 800548c:	e7f3      	b.n	8005476 <__assert_func+0x12>
 800548e:	bf00      	nop
 8005490:	20000064 	.word	0x20000064
 8005494:	0800629f 	.word	0x0800629f
 8005498:	080062ac 	.word	0x080062ac
 800549c:	080062da 	.word	0x080062da

080054a0 <_free_r>:
 80054a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054a2:	2900      	cmp	r1, #0
 80054a4:	d044      	beq.n	8005530 <_free_r+0x90>
 80054a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054aa:	9001      	str	r0, [sp, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f1a1 0404 	sub.w	r4, r1, #4
 80054b2:	bfb8      	it	lt
 80054b4:	18e4      	addlt	r4, r4, r3
 80054b6:	f000 f8e7 	bl	8005688 <__malloc_lock>
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <_free_r+0x94>)
 80054bc:	9801      	ldr	r0, [sp, #4]
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	b933      	cbnz	r3, 80054d0 <_free_r+0x30>
 80054c2:	6063      	str	r3, [r4, #4]
 80054c4:	6014      	str	r4, [r2, #0]
 80054c6:	b003      	add	sp, #12
 80054c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054cc:	f000 b8e2 	b.w	8005694 <__malloc_unlock>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d908      	bls.n	80054e6 <_free_r+0x46>
 80054d4:	6825      	ldr	r5, [r4, #0]
 80054d6:	1961      	adds	r1, r4, r5
 80054d8:	428b      	cmp	r3, r1
 80054da:	bf01      	itttt	eq
 80054dc:	6819      	ldreq	r1, [r3, #0]
 80054de:	685b      	ldreq	r3, [r3, #4]
 80054e0:	1949      	addeq	r1, r1, r5
 80054e2:	6021      	streq	r1, [r4, #0]
 80054e4:	e7ed      	b.n	80054c2 <_free_r+0x22>
 80054e6:	461a      	mov	r2, r3
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	b10b      	cbz	r3, 80054f0 <_free_r+0x50>
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d9fa      	bls.n	80054e6 <_free_r+0x46>
 80054f0:	6811      	ldr	r1, [r2, #0]
 80054f2:	1855      	adds	r5, r2, r1
 80054f4:	42a5      	cmp	r5, r4
 80054f6:	d10b      	bne.n	8005510 <_free_r+0x70>
 80054f8:	6824      	ldr	r4, [r4, #0]
 80054fa:	4421      	add	r1, r4
 80054fc:	1854      	adds	r4, r2, r1
 80054fe:	42a3      	cmp	r3, r4
 8005500:	6011      	str	r1, [r2, #0]
 8005502:	d1e0      	bne.n	80054c6 <_free_r+0x26>
 8005504:	681c      	ldr	r4, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	6053      	str	r3, [r2, #4]
 800550a:	440c      	add	r4, r1
 800550c:	6014      	str	r4, [r2, #0]
 800550e:	e7da      	b.n	80054c6 <_free_r+0x26>
 8005510:	d902      	bls.n	8005518 <_free_r+0x78>
 8005512:	230c      	movs	r3, #12
 8005514:	6003      	str	r3, [r0, #0]
 8005516:	e7d6      	b.n	80054c6 <_free_r+0x26>
 8005518:	6825      	ldr	r5, [r4, #0]
 800551a:	1961      	adds	r1, r4, r5
 800551c:	428b      	cmp	r3, r1
 800551e:	bf04      	itt	eq
 8005520:	6819      	ldreq	r1, [r3, #0]
 8005522:	685b      	ldreq	r3, [r3, #4]
 8005524:	6063      	str	r3, [r4, #4]
 8005526:	bf04      	itt	eq
 8005528:	1949      	addeq	r1, r1, r5
 800552a:	6021      	streq	r1, [r4, #0]
 800552c:	6054      	str	r4, [r2, #4]
 800552e:	e7ca      	b.n	80054c6 <_free_r+0x26>
 8005530:	b003      	add	sp, #12
 8005532:	bd30      	pop	{r4, r5, pc}
 8005534:	20000584 	.word	0x20000584

08005538 <malloc>:
 8005538:	4b02      	ldr	r3, [pc, #8]	; (8005544 <malloc+0xc>)
 800553a:	4601      	mov	r1, r0
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	f000 b823 	b.w	8005588 <_malloc_r>
 8005542:	bf00      	nop
 8005544:	20000064 	.word	0x20000064

08005548 <sbrk_aligned>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4e0e      	ldr	r6, [pc, #56]	; (8005584 <sbrk_aligned+0x3c>)
 800554c:	460c      	mov	r4, r1
 800554e:	6831      	ldr	r1, [r6, #0]
 8005550:	4605      	mov	r5, r0
 8005552:	b911      	cbnz	r1, 800555a <sbrk_aligned+0x12>
 8005554:	f000 fcce 	bl	8005ef4 <_sbrk_r>
 8005558:	6030      	str	r0, [r6, #0]
 800555a:	4621      	mov	r1, r4
 800555c:	4628      	mov	r0, r5
 800555e:	f000 fcc9 	bl	8005ef4 <_sbrk_r>
 8005562:	1c43      	adds	r3, r0, #1
 8005564:	d00a      	beq.n	800557c <sbrk_aligned+0x34>
 8005566:	1cc4      	adds	r4, r0, #3
 8005568:	f024 0403 	bic.w	r4, r4, #3
 800556c:	42a0      	cmp	r0, r4
 800556e:	d007      	beq.n	8005580 <sbrk_aligned+0x38>
 8005570:	1a21      	subs	r1, r4, r0
 8005572:	4628      	mov	r0, r5
 8005574:	f000 fcbe 	bl	8005ef4 <_sbrk_r>
 8005578:	3001      	adds	r0, #1
 800557a:	d101      	bne.n	8005580 <sbrk_aligned+0x38>
 800557c:	f04f 34ff 	mov.w	r4, #4294967295
 8005580:	4620      	mov	r0, r4
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	20000588 	.word	0x20000588

08005588 <_malloc_r>:
 8005588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800558c:	1ccd      	adds	r5, r1, #3
 800558e:	f025 0503 	bic.w	r5, r5, #3
 8005592:	3508      	adds	r5, #8
 8005594:	2d0c      	cmp	r5, #12
 8005596:	bf38      	it	cc
 8005598:	250c      	movcc	r5, #12
 800559a:	2d00      	cmp	r5, #0
 800559c:	4607      	mov	r7, r0
 800559e:	db01      	blt.n	80055a4 <_malloc_r+0x1c>
 80055a0:	42a9      	cmp	r1, r5
 80055a2:	d905      	bls.n	80055b0 <_malloc_r+0x28>
 80055a4:	230c      	movs	r3, #12
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	2600      	movs	r6, #0
 80055aa:	4630      	mov	r0, r6
 80055ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005684 <_malloc_r+0xfc>
 80055b4:	f000 f868 	bl	8005688 <__malloc_lock>
 80055b8:	f8d8 3000 	ldr.w	r3, [r8]
 80055bc:	461c      	mov	r4, r3
 80055be:	bb5c      	cbnz	r4, 8005618 <_malloc_r+0x90>
 80055c0:	4629      	mov	r1, r5
 80055c2:	4638      	mov	r0, r7
 80055c4:	f7ff ffc0 	bl	8005548 <sbrk_aligned>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	4604      	mov	r4, r0
 80055cc:	d155      	bne.n	800567a <_malloc_r+0xf2>
 80055ce:	f8d8 4000 	ldr.w	r4, [r8]
 80055d2:	4626      	mov	r6, r4
 80055d4:	2e00      	cmp	r6, #0
 80055d6:	d145      	bne.n	8005664 <_malloc_r+0xdc>
 80055d8:	2c00      	cmp	r4, #0
 80055da:	d048      	beq.n	800566e <_malloc_r+0xe6>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	4631      	mov	r1, r6
 80055e0:	4638      	mov	r0, r7
 80055e2:	eb04 0903 	add.w	r9, r4, r3
 80055e6:	f000 fc85 	bl	8005ef4 <_sbrk_r>
 80055ea:	4581      	cmp	r9, r0
 80055ec:	d13f      	bne.n	800566e <_malloc_r+0xe6>
 80055ee:	6821      	ldr	r1, [r4, #0]
 80055f0:	1a6d      	subs	r5, r5, r1
 80055f2:	4629      	mov	r1, r5
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff ffa7 	bl	8005548 <sbrk_aligned>
 80055fa:	3001      	adds	r0, #1
 80055fc:	d037      	beq.n	800566e <_malloc_r+0xe6>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	442b      	add	r3, r5
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	f8d8 3000 	ldr.w	r3, [r8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d038      	beq.n	800567e <_malloc_r+0xf6>
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	42a2      	cmp	r2, r4
 8005610:	d12b      	bne.n	800566a <_malloc_r+0xe2>
 8005612:	2200      	movs	r2, #0
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	e00f      	b.n	8005638 <_malloc_r+0xb0>
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	1b52      	subs	r2, r2, r5
 800561c:	d41f      	bmi.n	800565e <_malloc_r+0xd6>
 800561e:	2a0b      	cmp	r2, #11
 8005620:	d917      	bls.n	8005652 <_malloc_r+0xca>
 8005622:	1961      	adds	r1, r4, r5
 8005624:	42a3      	cmp	r3, r4
 8005626:	6025      	str	r5, [r4, #0]
 8005628:	bf18      	it	ne
 800562a:	6059      	strne	r1, [r3, #4]
 800562c:	6863      	ldr	r3, [r4, #4]
 800562e:	bf08      	it	eq
 8005630:	f8c8 1000 	streq.w	r1, [r8]
 8005634:	5162      	str	r2, [r4, r5]
 8005636:	604b      	str	r3, [r1, #4]
 8005638:	4638      	mov	r0, r7
 800563a:	f104 060b 	add.w	r6, r4, #11
 800563e:	f000 f829 	bl	8005694 <__malloc_unlock>
 8005642:	f026 0607 	bic.w	r6, r6, #7
 8005646:	1d23      	adds	r3, r4, #4
 8005648:	1af2      	subs	r2, r6, r3
 800564a:	d0ae      	beq.n	80055aa <_malloc_r+0x22>
 800564c:	1b9b      	subs	r3, r3, r6
 800564e:	50a3      	str	r3, [r4, r2]
 8005650:	e7ab      	b.n	80055aa <_malloc_r+0x22>
 8005652:	42a3      	cmp	r3, r4
 8005654:	6862      	ldr	r2, [r4, #4]
 8005656:	d1dd      	bne.n	8005614 <_malloc_r+0x8c>
 8005658:	f8c8 2000 	str.w	r2, [r8]
 800565c:	e7ec      	b.n	8005638 <_malloc_r+0xb0>
 800565e:	4623      	mov	r3, r4
 8005660:	6864      	ldr	r4, [r4, #4]
 8005662:	e7ac      	b.n	80055be <_malloc_r+0x36>
 8005664:	4634      	mov	r4, r6
 8005666:	6876      	ldr	r6, [r6, #4]
 8005668:	e7b4      	b.n	80055d4 <_malloc_r+0x4c>
 800566a:	4613      	mov	r3, r2
 800566c:	e7cc      	b.n	8005608 <_malloc_r+0x80>
 800566e:	230c      	movs	r3, #12
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4638      	mov	r0, r7
 8005674:	f000 f80e 	bl	8005694 <__malloc_unlock>
 8005678:	e797      	b.n	80055aa <_malloc_r+0x22>
 800567a:	6025      	str	r5, [r4, #0]
 800567c:	e7dc      	b.n	8005638 <_malloc_r+0xb0>
 800567e:	605b      	str	r3, [r3, #4]
 8005680:	deff      	udf	#255	; 0xff
 8005682:	bf00      	nop
 8005684:	20000584 	.word	0x20000584

08005688 <__malloc_lock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_lock+0x8>)
 800568a:	f7ff bee9 	b.w	8005460 <__retarget_lock_acquire_recursive>
 800568e:	bf00      	nop
 8005690:	20000580 	.word	0x20000580

08005694 <__malloc_unlock>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__malloc_unlock+0x8>)
 8005696:	f7ff bee4 	b.w	8005462 <__retarget_lock_release_recursive>
 800569a:	bf00      	nop
 800569c:	20000580 	.word	0x20000580

080056a0 <__sfputc_r>:
 80056a0:	6893      	ldr	r3, [r2, #8]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	b410      	push	{r4}
 80056a8:	6093      	str	r3, [r2, #8]
 80056aa:	da08      	bge.n	80056be <__sfputc_r+0x1e>
 80056ac:	6994      	ldr	r4, [r2, #24]
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	db01      	blt.n	80056b6 <__sfputc_r+0x16>
 80056b2:	290a      	cmp	r1, #10
 80056b4:	d103      	bne.n	80056be <__sfputc_r+0x1e>
 80056b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ba:	f000 bb85 	b.w	8005dc8 <__swbuf_r>
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	1c58      	adds	r0, r3, #1
 80056c2:	6010      	str	r0, [r2, #0]
 80056c4:	7019      	strb	r1, [r3, #0]
 80056c6:	4608      	mov	r0, r1
 80056c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <__sfputs_r>:
 80056ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d0:	4606      	mov	r6, r0
 80056d2:	460f      	mov	r7, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	18d5      	adds	r5, r2, r3
 80056d8:	42ac      	cmp	r4, r5
 80056da:	d101      	bne.n	80056e0 <__sfputs_r+0x12>
 80056dc:	2000      	movs	r0, #0
 80056de:	e007      	b.n	80056f0 <__sfputs_r+0x22>
 80056e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e4:	463a      	mov	r2, r7
 80056e6:	4630      	mov	r0, r6
 80056e8:	f7ff ffda 	bl	80056a0 <__sfputc_r>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d1f3      	bne.n	80056d8 <__sfputs_r+0xa>
 80056f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056f4 <_vfiprintf_r>:
 80056f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f8:	460d      	mov	r5, r1
 80056fa:	b09d      	sub	sp, #116	; 0x74
 80056fc:	4614      	mov	r4, r2
 80056fe:	4698      	mov	r8, r3
 8005700:	4606      	mov	r6, r0
 8005702:	b118      	cbz	r0, 800570c <_vfiprintf_r+0x18>
 8005704:	6a03      	ldr	r3, [r0, #32]
 8005706:	b90b      	cbnz	r3, 800570c <_vfiprintf_r+0x18>
 8005708:	f7ff fda6 	bl	8005258 <__sinit>
 800570c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800570e:	07d9      	lsls	r1, r3, #31
 8005710:	d405      	bmi.n	800571e <_vfiprintf_r+0x2a>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	059a      	lsls	r2, r3, #22
 8005716:	d402      	bmi.n	800571e <_vfiprintf_r+0x2a>
 8005718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800571a:	f7ff fea1 	bl	8005460 <__retarget_lock_acquire_recursive>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	071b      	lsls	r3, r3, #28
 8005722:	d501      	bpl.n	8005728 <_vfiprintf_r+0x34>
 8005724:	692b      	ldr	r3, [r5, #16]
 8005726:	b99b      	cbnz	r3, 8005750 <_vfiprintf_r+0x5c>
 8005728:	4629      	mov	r1, r5
 800572a:	4630      	mov	r0, r6
 800572c:	f000 fb8a 	bl	8005e44 <__swsetup_r>
 8005730:	b170      	cbz	r0, 8005750 <_vfiprintf_r+0x5c>
 8005732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005734:	07dc      	lsls	r4, r3, #31
 8005736:	d504      	bpl.n	8005742 <_vfiprintf_r+0x4e>
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	b01d      	add	sp, #116	; 0x74
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	0598      	lsls	r0, r3, #22
 8005746:	d4f7      	bmi.n	8005738 <_vfiprintf_r+0x44>
 8005748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800574a:	f7ff fe8a 	bl	8005462 <__retarget_lock_release_recursive>
 800574e:	e7f3      	b.n	8005738 <_vfiprintf_r+0x44>
 8005750:	2300      	movs	r3, #0
 8005752:	9309      	str	r3, [sp, #36]	; 0x24
 8005754:	2320      	movs	r3, #32
 8005756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800575a:	f8cd 800c 	str.w	r8, [sp, #12]
 800575e:	2330      	movs	r3, #48	; 0x30
 8005760:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005914 <_vfiprintf_r+0x220>
 8005764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005768:	f04f 0901 	mov.w	r9, #1
 800576c:	4623      	mov	r3, r4
 800576e:	469a      	mov	sl, r3
 8005770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005774:	b10a      	cbz	r2, 800577a <_vfiprintf_r+0x86>
 8005776:	2a25      	cmp	r2, #37	; 0x25
 8005778:	d1f9      	bne.n	800576e <_vfiprintf_r+0x7a>
 800577a:	ebba 0b04 	subs.w	fp, sl, r4
 800577e:	d00b      	beq.n	8005798 <_vfiprintf_r+0xa4>
 8005780:	465b      	mov	r3, fp
 8005782:	4622      	mov	r2, r4
 8005784:	4629      	mov	r1, r5
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ffa1 	bl	80056ce <__sfputs_r>
 800578c:	3001      	adds	r0, #1
 800578e:	f000 80a9 	beq.w	80058e4 <_vfiprintf_r+0x1f0>
 8005792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005794:	445a      	add	r2, fp
 8005796:	9209      	str	r2, [sp, #36]	; 0x24
 8005798:	f89a 3000 	ldrb.w	r3, [sl]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a1 	beq.w	80058e4 <_vfiprintf_r+0x1f0>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057ac:	f10a 0a01 	add.w	sl, sl, #1
 80057b0:	9304      	str	r3, [sp, #16]
 80057b2:	9307      	str	r3, [sp, #28]
 80057b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057b8:	931a      	str	r3, [sp, #104]	; 0x68
 80057ba:	4654      	mov	r4, sl
 80057bc:	2205      	movs	r2, #5
 80057be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c2:	4854      	ldr	r0, [pc, #336]	; (8005914 <_vfiprintf_r+0x220>)
 80057c4:	f7fa fd0c 	bl	80001e0 <memchr>
 80057c8:	9a04      	ldr	r2, [sp, #16]
 80057ca:	b9d8      	cbnz	r0, 8005804 <_vfiprintf_r+0x110>
 80057cc:	06d1      	lsls	r1, r2, #27
 80057ce:	bf44      	itt	mi
 80057d0:	2320      	movmi	r3, #32
 80057d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d6:	0713      	lsls	r3, r2, #28
 80057d8:	bf44      	itt	mi
 80057da:	232b      	movmi	r3, #43	; 0x2b
 80057dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057e0:	f89a 3000 	ldrb.w	r3, [sl]
 80057e4:	2b2a      	cmp	r3, #42	; 0x2a
 80057e6:	d015      	beq.n	8005814 <_vfiprintf_r+0x120>
 80057e8:	9a07      	ldr	r2, [sp, #28]
 80057ea:	4654      	mov	r4, sl
 80057ec:	2000      	movs	r0, #0
 80057ee:	f04f 0c0a 	mov.w	ip, #10
 80057f2:	4621      	mov	r1, r4
 80057f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f8:	3b30      	subs	r3, #48	; 0x30
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	d94d      	bls.n	800589a <_vfiprintf_r+0x1a6>
 80057fe:	b1b0      	cbz	r0, 800582e <_vfiprintf_r+0x13a>
 8005800:	9207      	str	r2, [sp, #28]
 8005802:	e014      	b.n	800582e <_vfiprintf_r+0x13a>
 8005804:	eba0 0308 	sub.w	r3, r0, r8
 8005808:	fa09 f303 	lsl.w	r3, r9, r3
 800580c:	4313      	orrs	r3, r2
 800580e:	9304      	str	r3, [sp, #16]
 8005810:	46a2      	mov	sl, r4
 8005812:	e7d2      	b.n	80057ba <_vfiprintf_r+0xc6>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	1d19      	adds	r1, r3, #4
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	9103      	str	r1, [sp, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	bfbb      	ittet	lt
 8005820:	425b      	neglt	r3, r3
 8005822:	f042 0202 	orrlt.w	r2, r2, #2
 8005826:	9307      	strge	r3, [sp, #28]
 8005828:	9307      	strlt	r3, [sp, #28]
 800582a:	bfb8      	it	lt
 800582c:	9204      	strlt	r2, [sp, #16]
 800582e:	7823      	ldrb	r3, [r4, #0]
 8005830:	2b2e      	cmp	r3, #46	; 0x2e
 8005832:	d10c      	bne.n	800584e <_vfiprintf_r+0x15a>
 8005834:	7863      	ldrb	r3, [r4, #1]
 8005836:	2b2a      	cmp	r3, #42	; 0x2a
 8005838:	d134      	bne.n	80058a4 <_vfiprintf_r+0x1b0>
 800583a:	9b03      	ldr	r3, [sp, #12]
 800583c:	1d1a      	adds	r2, r3, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	9203      	str	r2, [sp, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	bfb8      	it	lt
 8005846:	f04f 33ff 	movlt.w	r3, #4294967295
 800584a:	3402      	adds	r4, #2
 800584c:	9305      	str	r3, [sp, #20]
 800584e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005924 <_vfiprintf_r+0x230>
 8005852:	7821      	ldrb	r1, [r4, #0]
 8005854:	2203      	movs	r2, #3
 8005856:	4650      	mov	r0, sl
 8005858:	f7fa fcc2 	bl	80001e0 <memchr>
 800585c:	b138      	cbz	r0, 800586e <_vfiprintf_r+0x17a>
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	eba0 000a 	sub.w	r0, r0, sl
 8005864:	2240      	movs	r2, #64	; 0x40
 8005866:	4082      	lsls	r2, r0
 8005868:	4313      	orrs	r3, r2
 800586a:	3401      	adds	r4, #1
 800586c:	9304      	str	r3, [sp, #16]
 800586e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005872:	4829      	ldr	r0, [pc, #164]	; (8005918 <_vfiprintf_r+0x224>)
 8005874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005878:	2206      	movs	r2, #6
 800587a:	f7fa fcb1 	bl	80001e0 <memchr>
 800587e:	2800      	cmp	r0, #0
 8005880:	d03f      	beq.n	8005902 <_vfiprintf_r+0x20e>
 8005882:	4b26      	ldr	r3, [pc, #152]	; (800591c <_vfiprintf_r+0x228>)
 8005884:	bb1b      	cbnz	r3, 80058ce <_vfiprintf_r+0x1da>
 8005886:	9b03      	ldr	r3, [sp, #12]
 8005888:	3307      	adds	r3, #7
 800588a:	f023 0307 	bic.w	r3, r3, #7
 800588e:	3308      	adds	r3, #8
 8005890:	9303      	str	r3, [sp, #12]
 8005892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005894:	443b      	add	r3, r7
 8005896:	9309      	str	r3, [sp, #36]	; 0x24
 8005898:	e768      	b.n	800576c <_vfiprintf_r+0x78>
 800589a:	fb0c 3202 	mla	r2, ip, r2, r3
 800589e:	460c      	mov	r4, r1
 80058a0:	2001      	movs	r0, #1
 80058a2:	e7a6      	b.n	80057f2 <_vfiprintf_r+0xfe>
 80058a4:	2300      	movs	r3, #0
 80058a6:	3401      	adds	r4, #1
 80058a8:	9305      	str	r3, [sp, #20]
 80058aa:	4619      	mov	r1, r3
 80058ac:	f04f 0c0a 	mov.w	ip, #10
 80058b0:	4620      	mov	r0, r4
 80058b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058b6:	3a30      	subs	r2, #48	; 0x30
 80058b8:	2a09      	cmp	r2, #9
 80058ba:	d903      	bls.n	80058c4 <_vfiprintf_r+0x1d0>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0c6      	beq.n	800584e <_vfiprintf_r+0x15a>
 80058c0:	9105      	str	r1, [sp, #20]
 80058c2:	e7c4      	b.n	800584e <_vfiprintf_r+0x15a>
 80058c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c8:	4604      	mov	r4, r0
 80058ca:	2301      	movs	r3, #1
 80058cc:	e7f0      	b.n	80058b0 <_vfiprintf_r+0x1bc>
 80058ce:	ab03      	add	r3, sp, #12
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	462a      	mov	r2, r5
 80058d4:	4b12      	ldr	r3, [pc, #72]	; (8005920 <_vfiprintf_r+0x22c>)
 80058d6:	a904      	add	r1, sp, #16
 80058d8:	4630      	mov	r0, r6
 80058da:	f3af 8000 	nop.w
 80058de:	4607      	mov	r7, r0
 80058e0:	1c78      	adds	r0, r7, #1
 80058e2:	d1d6      	bne.n	8005892 <_vfiprintf_r+0x19e>
 80058e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058e6:	07d9      	lsls	r1, r3, #31
 80058e8:	d405      	bmi.n	80058f6 <_vfiprintf_r+0x202>
 80058ea:	89ab      	ldrh	r3, [r5, #12]
 80058ec:	059a      	lsls	r2, r3, #22
 80058ee:	d402      	bmi.n	80058f6 <_vfiprintf_r+0x202>
 80058f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f2:	f7ff fdb6 	bl	8005462 <__retarget_lock_release_recursive>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	065b      	lsls	r3, r3, #25
 80058fa:	f53f af1d 	bmi.w	8005738 <_vfiprintf_r+0x44>
 80058fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005900:	e71c      	b.n	800573c <_vfiprintf_r+0x48>
 8005902:	ab03      	add	r3, sp, #12
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	462a      	mov	r2, r5
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <_vfiprintf_r+0x22c>)
 800590a:	a904      	add	r1, sp, #16
 800590c:	4630      	mov	r0, r6
 800590e:	f000 f879 	bl	8005a04 <_printf_i>
 8005912:	e7e4      	b.n	80058de <_vfiprintf_r+0x1ea>
 8005914:	080062db 	.word	0x080062db
 8005918:	080062e5 	.word	0x080062e5
 800591c:	00000000 	.word	0x00000000
 8005920:	080056cf 	.word	0x080056cf
 8005924:	080062e1 	.word	0x080062e1

08005928 <_printf_common>:
 8005928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	4616      	mov	r6, r2
 800592e:	4699      	mov	r9, r3
 8005930:	688a      	ldr	r2, [r1, #8]
 8005932:	690b      	ldr	r3, [r1, #16]
 8005934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005938:	4293      	cmp	r3, r2
 800593a:	bfb8      	it	lt
 800593c:	4613      	movlt	r3, r2
 800593e:	6033      	str	r3, [r6, #0]
 8005940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005944:	4607      	mov	r7, r0
 8005946:	460c      	mov	r4, r1
 8005948:	b10a      	cbz	r2, 800594e <_printf_common+0x26>
 800594a:	3301      	adds	r3, #1
 800594c:	6033      	str	r3, [r6, #0]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	0699      	lsls	r1, r3, #26
 8005952:	bf42      	ittt	mi
 8005954:	6833      	ldrmi	r3, [r6, #0]
 8005956:	3302      	addmi	r3, #2
 8005958:	6033      	strmi	r3, [r6, #0]
 800595a:	6825      	ldr	r5, [r4, #0]
 800595c:	f015 0506 	ands.w	r5, r5, #6
 8005960:	d106      	bne.n	8005970 <_printf_common+0x48>
 8005962:	f104 0a19 	add.w	sl, r4, #25
 8005966:	68e3      	ldr	r3, [r4, #12]
 8005968:	6832      	ldr	r2, [r6, #0]
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	42ab      	cmp	r3, r5
 800596e:	dc26      	bgt.n	80059be <_printf_common+0x96>
 8005970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005974:	1e13      	subs	r3, r2, #0
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	bf18      	it	ne
 800597a:	2301      	movne	r3, #1
 800597c:	0692      	lsls	r2, r2, #26
 800597e:	d42b      	bmi.n	80059d8 <_printf_common+0xb0>
 8005980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005984:	4649      	mov	r1, r9
 8005986:	4638      	mov	r0, r7
 8005988:	47c0      	blx	r8
 800598a:	3001      	adds	r0, #1
 800598c:	d01e      	beq.n	80059cc <_printf_common+0xa4>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	6922      	ldr	r2, [r4, #16]
 8005992:	f003 0306 	and.w	r3, r3, #6
 8005996:	2b04      	cmp	r3, #4
 8005998:	bf02      	ittt	eq
 800599a:	68e5      	ldreq	r5, [r4, #12]
 800599c:	6833      	ldreq	r3, [r6, #0]
 800599e:	1aed      	subeq	r5, r5, r3
 80059a0:	68a3      	ldr	r3, [r4, #8]
 80059a2:	bf0c      	ite	eq
 80059a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a8:	2500      	movne	r5, #0
 80059aa:	4293      	cmp	r3, r2
 80059ac:	bfc4      	itt	gt
 80059ae:	1a9b      	subgt	r3, r3, r2
 80059b0:	18ed      	addgt	r5, r5, r3
 80059b2:	2600      	movs	r6, #0
 80059b4:	341a      	adds	r4, #26
 80059b6:	42b5      	cmp	r5, r6
 80059b8:	d11a      	bne.n	80059f0 <_printf_common+0xc8>
 80059ba:	2000      	movs	r0, #0
 80059bc:	e008      	b.n	80059d0 <_printf_common+0xa8>
 80059be:	2301      	movs	r3, #1
 80059c0:	4652      	mov	r2, sl
 80059c2:	4649      	mov	r1, r9
 80059c4:	4638      	mov	r0, r7
 80059c6:	47c0      	blx	r8
 80059c8:	3001      	adds	r0, #1
 80059ca:	d103      	bne.n	80059d4 <_printf_common+0xac>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d4:	3501      	adds	r5, #1
 80059d6:	e7c6      	b.n	8005966 <_printf_common+0x3e>
 80059d8:	18e1      	adds	r1, r4, r3
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	2030      	movs	r0, #48	; 0x30
 80059de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059e2:	4422      	add	r2, r4
 80059e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059ec:	3302      	adds	r3, #2
 80059ee:	e7c7      	b.n	8005980 <_printf_common+0x58>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4622      	mov	r2, r4
 80059f4:	4649      	mov	r1, r9
 80059f6:	4638      	mov	r0, r7
 80059f8:	47c0      	blx	r8
 80059fa:	3001      	adds	r0, #1
 80059fc:	d0e6      	beq.n	80059cc <_printf_common+0xa4>
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7d9      	b.n	80059b6 <_printf_common+0x8e>
	...

08005a04 <_printf_i>:
 8005a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	7e0f      	ldrb	r7, [r1, #24]
 8005a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a0c:	2f78      	cmp	r7, #120	; 0x78
 8005a0e:	4691      	mov	r9, r2
 8005a10:	4680      	mov	r8, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	469a      	mov	sl, r3
 8005a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a1a:	d807      	bhi.n	8005a2c <_printf_i+0x28>
 8005a1c:	2f62      	cmp	r7, #98	; 0x62
 8005a1e:	d80a      	bhi.n	8005a36 <_printf_i+0x32>
 8005a20:	2f00      	cmp	r7, #0
 8005a22:	f000 80d4 	beq.w	8005bce <_printf_i+0x1ca>
 8005a26:	2f58      	cmp	r7, #88	; 0x58
 8005a28:	f000 80c0 	beq.w	8005bac <_printf_i+0x1a8>
 8005a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a34:	e03a      	b.n	8005aac <_printf_i+0xa8>
 8005a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a3a:	2b15      	cmp	r3, #21
 8005a3c:	d8f6      	bhi.n	8005a2c <_printf_i+0x28>
 8005a3e:	a101      	add	r1, pc, #4	; (adr r1, 8005a44 <_printf_i+0x40>)
 8005a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a44:	08005a9d 	.word	0x08005a9d
 8005a48:	08005ab1 	.word	0x08005ab1
 8005a4c:	08005a2d 	.word	0x08005a2d
 8005a50:	08005a2d 	.word	0x08005a2d
 8005a54:	08005a2d 	.word	0x08005a2d
 8005a58:	08005a2d 	.word	0x08005a2d
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	08005a2d 	.word	0x08005a2d
 8005a64:	08005a2d 	.word	0x08005a2d
 8005a68:	08005a2d 	.word	0x08005a2d
 8005a6c:	08005a2d 	.word	0x08005a2d
 8005a70:	08005bb5 	.word	0x08005bb5
 8005a74:	08005add 	.word	0x08005add
 8005a78:	08005b6f 	.word	0x08005b6f
 8005a7c:	08005a2d 	.word	0x08005a2d
 8005a80:	08005a2d 	.word	0x08005a2d
 8005a84:	08005bd7 	.word	0x08005bd7
 8005a88:	08005a2d 	.word	0x08005a2d
 8005a8c:	08005add 	.word	0x08005add
 8005a90:	08005a2d 	.word	0x08005a2d
 8005a94:	08005a2d 	.word	0x08005a2d
 8005a98:	08005b77 	.word	0x08005b77
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	602a      	str	r2, [r5, #0]
 8005aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aac:	2301      	movs	r3, #1
 8005aae:	e09f      	b.n	8005bf0 <_printf_i+0x1ec>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	682b      	ldr	r3, [r5, #0]
 8005ab4:	0607      	lsls	r7, r0, #24
 8005ab6:	f103 0104 	add.w	r1, r3, #4
 8005aba:	6029      	str	r1, [r5, #0]
 8005abc:	d501      	bpl.n	8005ac2 <_printf_i+0xbe>
 8005abe:	681e      	ldr	r6, [r3, #0]
 8005ac0:	e003      	b.n	8005aca <_printf_i+0xc6>
 8005ac2:	0646      	lsls	r6, r0, #25
 8005ac4:	d5fb      	bpl.n	8005abe <_printf_i+0xba>
 8005ac6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	da03      	bge.n	8005ad6 <_printf_i+0xd2>
 8005ace:	232d      	movs	r3, #45	; 0x2d
 8005ad0:	4276      	negs	r6, r6
 8005ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad6:	485a      	ldr	r0, [pc, #360]	; (8005c40 <_printf_i+0x23c>)
 8005ad8:	230a      	movs	r3, #10
 8005ada:	e012      	b.n	8005b02 <_printf_i+0xfe>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	1d19      	adds	r1, r3, #4
 8005ae2:	6029      	str	r1, [r5, #0]
 8005ae4:	0605      	lsls	r5, r0, #24
 8005ae6:	d501      	bpl.n	8005aec <_printf_i+0xe8>
 8005ae8:	681e      	ldr	r6, [r3, #0]
 8005aea:	e002      	b.n	8005af2 <_printf_i+0xee>
 8005aec:	0641      	lsls	r1, r0, #25
 8005aee:	d5fb      	bpl.n	8005ae8 <_printf_i+0xe4>
 8005af0:	881e      	ldrh	r6, [r3, #0]
 8005af2:	4853      	ldr	r0, [pc, #332]	; (8005c40 <_printf_i+0x23c>)
 8005af4:	2f6f      	cmp	r7, #111	; 0x6f
 8005af6:	bf0c      	ite	eq
 8005af8:	2308      	moveq	r3, #8
 8005afa:	230a      	movne	r3, #10
 8005afc:	2100      	movs	r1, #0
 8005afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b02:	6865      	ldr	r5, [r4, #4]
 8005b04:	60a5      	str	r5, [r4, #8]
 8005b06:	2d00      	cmp	r5, #0
 8005b08:	bfa2      	ittt	ge
 8005b0a:	6821      	ldrge	r1, [r4, #0]
 8005b0c:	f021 0104 	bicge.w	r1, r1, #4
 8005b10:	6021      	strge	r1, [r4, #0]
 8005b12:	b90e      	cbnz	r6, 8005b18 <_printf_i+0x114>
 8005b14:	2d00      	cmp	r5, #0
 8005b16:	d04b      	beq.n	8005bb0 <_printf_i+0x1ac>
 8005b18:	4615      	mov	r5, r2
 8005b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b22:	5dc7      	ldrb	r7, [r0, r7]
 8005b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b28:	4637      	mov	r7, r6
 8005b2a:	42bb      	cmp	r3, r7
 8005b2c:	460e      	mov	r6, r1
 8005b2e:	d9f4      	bls.n	8005b1a <_printf_i+0x116>
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d10b      	bne.n	8005b4c <_printf_i+0x148>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07de      	lsls	r6, r3, #31
 8005b38:	d508      	bpl.n	8005b4c <_printf_i+0x148>
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	6861      	ldr	r1, [r4, #4]
 8005b3e:	4299      	cmp	r1, r3
 8005b40:	bfde      	ittt	le
 8005b42:	2330      	movle	r3, #48	; 0x30
 8005b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b4c:	1b52      	subs	r2, r2, r5
 8005b4e:	6122      	str	r2, [r4, #16]
 8005b50:	f8cd a000 	str.w	sl, [sp]
 8005b54:	464b      	mov	r3, r9
 8005b56:	aa03      	add	r2, sp, #12
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	f7ff fee4 	bl	8005928 <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d14a      	bne.n	8005bfa <_printf_i+0x1f6>
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	b004      	add	sp, #16
 8005b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	f043 0320 	orr.w	r3, r3, #32
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	4833      	ldr	r0, [pc, #204]	; (8005c44 <_printf_i+0x240>)
 8005b78:	2778      	movs	r7, #120	; 0x78
 8005b7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	6829      	ldr	r1, [r5, #0]
 8005b82:	061f      	lsls	r7, r3, #24
 8005b84:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b88:	d402      	bmi.n	8005b90 <_printf_i+0x18c>
 8005b8a:	065f      	lsls	r7, r3, #25
 8005b8c:	bf48      	it	mi
 8005b8e:	b2b6      	uxthmi	r6, r6
 8005b90:	07df      	lsls	r7, r3, #31
 8005b92:	bf48      	it	mi
 8005b94:	f043 0320 	orrmi.w	r3, r3, #32
 8005b98:	6029      	str	r1, [r5, #0]
 8005b9a:	bf48      	it	mi
 8005b9c:	6023      	strmi	r3, [r4, #0]
 8005b9e:	b91e      	cbnz	r6, 8005ba8 <_printf_i+0x1a4>
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	f023 0320 	bic.w	r3, r3, #32
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	2310      	movs	r3, #16
 8005baa:	e7a7      	b.n	8005afc <_printf_i+0xf8>
 8005bac:	4824      	ldr	r0, [pc, #144]	; (8005c40 <_printf_i+0x23c>)
 8005bae:	e7e4      	b.n	8005b7a <_printf_i+0x176>
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	e7bd      	b.n	8005b30 <_printf_i+0x12c>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	6826      	ldr	r6, [r4, #0]
 8005bb8:	6961      	ldr	r1, [r4, #20]
 8005bba:	1d18      	adds	r0, r3, #4
 8005bbc:	6028      	str	r0, [r5, #0]
 8005bbe:	0635      	lsls	r5, r6, #24
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0x1c4>
 8005bc4:	6019      	str	r1, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <_printf_i+0x1ca>
 8005bc8:	0670      	lsls	r0, r6, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0x1c0>
 8005bcc:	8019      	strh	r1, [r3, #0]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	4615      	mov	r5, r2
 8005bd4:	e7bc      	b.n	8005b50 <_printf_i+0x14c>
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	602a      	str	r2, [r5, #0]
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	6862      	ldr	r2, [r4, #4]
 8005be0:	2100      	movs	r1, #0
 8005be2:	4628      	mov	r0, r5
 8005be4:	f7fa fafc 	bl	80001e0 <memchr>
 8005be8:	b108      	cbz	r0, 8005bee <_printf_i+0x1ea>
 8005bea:	1b40      	subs	r0, r0, r5
 8005bec:	6060      	str	r0, [r4, #4]
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf8:	e7aa      	b.n	8005b50 <_printf_i+0x14c>
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	462a      	mov	r2, r5
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4640      	mov	r0, r8
 8005c02:	47d0      	blx	sl
 8005c04:	3001      	adds	r0, #1
 8005c06:	d0ad      	beq.n	8005b64 <_printf_i+0x160>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	079b      	lsls	r3, r3, #30
 8005c0c:	d413      	bmi.n	8005c36 <_printf_i+0x232>
 8005c0e:	68e0      	ldr	r0, [r4, #12]
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	4298      	cmp	r0, r3
 8005c14:	bfb8      	it	lt
 8005c16:	4618      	movlt	r0, r3
 8005c18:	e7a6      	b.n	8005b68 <_printf_i+0x164>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	47d0      	blx	sl
 8005c24:	3001      	adds	r0, #1
 8005c26:	d09d      	beq.n	8005b64 <_printf_i+0x160>
 8005c28:	3501      	adds	r5, #1
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	9903      	ldr	r1, [sp, #12]
 8005c2e:	1a5b      	subs	r3, r3, r1
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dcf2      	bgt.n	8005c1a <_printf_i+0x216>
 8005c34:	e7eb      	b.n	8005c0e <_printf_i+0x20a>
 8005c36:	2500      	movs	r5, #0
 8005c38:	f104 0619 	add.w	r6, r4, #25
 8005c3c:	e7f5      	b.n	8005c2a <_printf_i+0x226>
 8005c3e:	bf00      	nop
 8005c40:	080062ec 	.word	0x080062ec
 8005c44:	080062fd 	.word	0x080062fd

08005c48 <__sflush_r>:
 8005c48:	898a      	ldrh	r2, [r1, #12]
 8005c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4e:	4605      	mov	r5, r0
 8005c50:	0710      	lsls	r0, r2, #28
 8005c52:	460c      	mov	r4, r1
 8005c54:	d458      	bmi.n	8005d08 <__sflush_r+0xc0>
 8005c56:	684b      	ldr	r3, [r1, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dc05      	bgt.n	8005c68 <__sflush_r+0x20>
 8005c5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	dc02      	bgt.n	8005c68 <__sflush_r+0x20>
 8005c62:	2000      	movs	r0, #0
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	d0f9      	beq.n	8005c62 <__sflush_r+0x1a>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c74:	682f      	ldr	r7, [r5, #0]
 8005c76:	6a21      	ldr	r1, [r4, #32]
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	d032      	beq.n	8005ce2 <__sflush_r+0x9a>
 8005c7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	075a      	lsls	r2, r3, #29
 8005c82:	d505      	bpl.n	8005c90 <__sflush_r+0x48>
 8005c84:	6863      	ldr	r3, [r4, #4]
 8005c86:	1ac0      	subs	r0, r0, r3
 8005c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c8a:	b10b      	cbz	r3, 8005c90 <__sflush_r+0x48>
 8005c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c8e:	1ac0      	subs	r0, r0, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	4602      	mov	r2, r0
 8005c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c96:	6a21      	ldr	r1, [r4, #32]
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b0      	blx	r6
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	89a3      	ldrh	r3, [r4, #12]
 8005ca0:	d106      	bne.n	8005cb0 <__sflush_r+0x68>
 8005ca2:	6829      	ldr	r1, [r5, #0]
 8005ca4:	291d      	cmp	r1, #29
 8005ca6:	d82b      	bhi.n	8005d00 <__sflush_r+0xb8>
 8005ca8:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <__sflush_r+0x108>)
 8005caa:	410a      	asrs	r2, r1
 8005cac:	07d6      	lsls	r6, r2, #31
 8005cae:	d427      	bmi.n	8005d00 <__sflush_r+0xb8>
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	6062      	str	r2, [r4, #4]
 8005cb4:	04d9      	lsls	r1, r3, #19
 8005cb6:	6922      	ldr	r2, [r4, #16]
 8005cb8:	6022      	str	r2, [r4, #0]
 8005cba:	d504      	bpl.n	8005cc6 <__sflush_r+0x7e>
 8005cbc:	1c42      	adds	r2, r0, #1
 8005cbe:	d101      	bne.n	8005cc4 <__sflush_r+0x7c>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b903      	cbnz	r3, 8005cc6 <__sflush_r+0x7e>
 8005cc4:	6560      	str	r0, [r4, #84]	; 0x54
 8005cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cc8:	602f      	str	r7, [r5, #0]
 8005cca:	2900      	cmp	r1, #0
 8005ccc:	d0c9      	beq.n	8005c62 <__sflush_r+0x1a>
 8005cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cd2:	4299      	cmp	r1, r3
 8005cd4:	d002      	beq.n	8005cdc <__sflush_r+0x94>
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7ff fbe2 	bl	80054a0 <_free_r>
 8005cdc:	2000      	movs	r0, #0
 8005cde:	6360      	str	r0, [r4, #52]	; 0x34
 8005ce0:	e7c0      	b.n	8005c64 <__sflush_r+0x1c>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b0      	blx	r6
 8005ce8:	1c41      	adds	r1, r0, #1
 8005cea:	d1c8      	bne.n	8005c7e <__sflush_r+0x36>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0c5      	beq.n	8005c7e <__sflush_r+0x36>
 8005cf2:	2b1d      	cmp	r3, #29
 8005cf4:	d001      	beq.n	8005cfa <__sflush_r+0xb2>
 8005cf6:	2b16      	cmp	r3, #22
 8005cf8:	d101      	bne.n	8005cfe <__sflush_r+0xb6>
 8005cfa:	602f      	str	r7, [r5, #0]
 8005cfc:	e7b1      	b.n	8005c62 <__sflush_r+0x1a>
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	e7ad      	b.n	8005c64 <__sflush_r+0x1c>
 8005d08:	690f      	ldr	r7, [r1, #16]
 8005d0a:	2f00      	cmp	r7, #0
 8005d0c:	d0a9      	beq.n	8005c62 <__sflush_r+0x1a>
 8005d0e:	0793      	lsls	r3, r2, #30
 8005d10:	680e      	ldr	r6, [r1, #0]
 8005d12:	bf08      	it	eq
 8005d14:	694b      	ldreq	r3, [r1, #20]
 8005d16:	600f      	str	r7, [r1, #0]
 8005d18:	bf18      	it	ne
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	eba6 0807 	sub.w	r8, r6, r7
 8005d20:	608b      	str	r3, [r1, #8]
 8005d22:	f1b8 0f00 	cmp.w	r8, #0
 8005d26:	dd9c      	ble.n	8005c62 <__sflush_r+0x1a>
 8005d28:	6a21      	ldr	r1, [r4, #32]
 8005d2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d2c:	4643      	mov	r3, r8
 8005d2e:	463a      	mov	r2, r7
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b0      	blx	r6
 8005d34:	2800      	cmp	r0, #0
 8005d36:	dc06      	bgt.n	8005d46 <__sflush_r+0xfe>
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	e78e      	b.n	8005c64 <__sflush_r+0x1c>
 8005d46:	4407      	add	r7, r0
 8005d48:	eba8 0800 	sub.w	r8, r8, r0
 8005d4c:	e7e9      	b.n	8005d22 <__sflush_r+0xda>
 8005d4e:	bf00      	nop
 8005d50:	dfbffffe 	.word	0xdfbffffe

08005d54 <_fflush_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	690b      	ldr	r3, [r1, #16]
 8005d58:	4605      	mov	r5, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	b913      	cbnz	r3, 8005d64 <_fflush_r+0x10>
 8005d5e:	2500      	movs	r5, #0
 8005d60:	4628      	mov	r0, r5
 8005d62:	bd38      	pop	{r3, r4, r5, pc}
 8005d64:	b118      	cbz	r0, 8005d6e <_fflush_r+0x1a>
 8005d66:	6a03      	ldr	r3, [r0, #32]
 8005d68:	b90b      	cbnz	r3, 8005d6e <_fflush_r+0x1a>
 8005d6a:	f7ff fa75 	bl	8005258 <__sinit>
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f3      	beq.n	8005d5e <_fflush_r+0xa>
 8005d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d78:	07d0      	lsls	r0, r2, #31
 8005d7a:	d404      	bmi.n	8005d86 <_fflush_r+0x32>
 8005d7c:	0599      	lsls	r1, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <_fflush_r+0x32>
 8005d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d82:	f7ff fb6d 	bl	8005460 <__retarget_lock_acquire_recursive>
 8005d86:	4628      	mov	r0, r5
 8005d88:	4621      	mov	r1, r4
 8005d8a:	f7ff ff5d 	bl	8005c48 <__sflush_r>
 8005d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d90:	07da      	lsls	r2, r3, #31
 8005d92:	4605      	mov	r5, r0
 8005d94:	d4e4      	bmi.n	8005d60 <_fflush_r+0xc>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	059b      	lsls	r3, r3, #22
 8005d9a:	d4e1      	bmi.n	8005d60 <_fflush_r+0xc>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d9e:	f7ff fb60 	bl	8005462 <__retarget_lock_release_recursive>
 8005da2:	e7dd      	b.n	8005d60 <_fflush_r+0xc>

08005da4 <fiprintf>:
 8005da4:	b40e      	push	{r1, r2, r3}
 8005da6:	b503      	push	{r0, r1, lr}
 8005da8:	4601      	mov	r1, r0
 8005daa:	ab03      	add	r3, sp, #12
 8005dac:	4805      	ldr	r0, [pc, #20]	; (8005dc4 <fiprintf+0x20>)
 8005dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	f7ff fc9d 	bl	80056f4 <_vfiprintf_r>
 8005dba:	b002      	add	sp, #8
 8005dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc0:	b003      	add	sp, #12
 8005dc2:	4770      	bx	lr
 8005dc4:	20000064 	.word	0x20000064

08005dc8 <__swbuf_r>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	460e      	mov	r6, r1
 8005dcc:	4614      	mov	r4, r2
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b118      	cbz	r0, 8005dda <__swbuf_r+0x12>
 8005dd2:	6a03      	ldr	r3, [r0, #32]
 8005dd4:	b90b      	cbnz	r3, 8005dda <__swbuf_r+0x12>
 8005dd6:	f7ff fa3f 	bl	8005258 <__sinit>
 8005dda:	69a3      	ldr	r3, [r4, #24]
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	071a      	lsls	r2, r3, #28
 8005de2:	d525      	bpl.n	8005e30 <__swbuf_r+0x68>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	b31b      	cbz	r3, 8005e30 <__swbuf_r+0x68>
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	6922      	ldr	r2, [r4, #16]
 8005dec:	1a98      	subs	r0, r3, r2
 8005dee:	6963      	ldr	r3, [r4, #20]
 8005df0:	b2f6      	uxtb	r6, r6
 8005df2:	4283      	cmp	r3, r0
 8005df4:	4637      	mov	r7, r6
 8005df6:	dc04      	bgt.n	8005e02 <__swbuf_r+0x3a>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f7ff ffaa 	bl	8005d54 <_fflush_r>
 8005e00:	b9e0      	cbnz	r0, 8005e3c <__swbuf_r+0x74>
 8005e02:	68a3      	ldr	r3, [r4, #8]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	60a3      	str	r3, [r4, #8]
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	701e      	strb	r6, [r3, #0]
 8005e10:	6962      	ldr	r2, [r4, #20]
 8005e12:	1c43      	adds	r3, r0, #1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d004      	beq.n	8005e22 <__swbuf_r+0x5a>
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	07db      	lsls	r3, r3, #31
 8005e1c:	d506      	bpl.n	8005e2c <__swbuf_r+0x64>
 8005e1e:	2e0a      	cmp	r6, #10
 8005e20:	d104      	bne.n	8005e2c <__swbuf_r+0x64>
 8005e22:	4621      	mov	r1, r4
 8005e24:	4628      	mov	r0, r5
 8005e26:	f7ff ff95 	bl	8005d54 <_fflush_r>
 8005e2a:	b938      	cbnz	r0, 8005e3c <__swbuf_r+0x74>
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e30:	4621      	mov	r1, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 f806 	bl	8005e44 <__swsetup_r>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d0d5      	beq.n	8005de8 <__swbuf_r+0x20>
 8005e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e40:	e7f4      	b.n	8005e2c <__swbuf_r+0x64>
	...

08005e44 <__swsetup_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <__swsetup_r+0xac>)
 8005e48:	4605      	mov	r5, r0
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	b118      	cbz	r0, 8005e58 <__swsetup_r+0x14>
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b90b      	cbnz	r3, 8005e58 <__swsetup_r+0x14>
 8005e54:	f7ff fa00 	bl	8005258 <__sinit>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e5e:	0718      	lsls	r0, r3, #28
 8005e60:	d422      	bmi.n	8005ea8 <__swsetup_r+0x64>
 8005e62:	06d9      	lsls	r1, r3, #27
 8005e64:	d407      	bmi.n	8005e76 <__swsetup_r+0x32>
 8005e66:	2309      	movs	r3, #9
 8005e68:	602b      	str	r3, [r5, #0]
 8005e6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	e034      	b.n	8005ee0 <__swsetup_r+0x9c>
 8005e76:	0758      	lsls	r0, r3, #29
 8005e78:	d512      	bpl.n	8005ea0 <__swsetup_r+0x5c>
 8005e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e7c:	b141      	cbz	r1, 8005e90 <__swsetup_r+0x4c>
 8005e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e82:	4299      	cmp	r1, r3
 8005e84:	d002      	beq.n	8005e8c <__swsetup_r+0x48>
 8005e86:	4628      	mov	r0, r5
 8005e88:	f7ff fb0a 	bl	80054a0 <_free_r>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	6363      	str	r3, [r4, #52]	; 0x34
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	6063      	str	r3, [r4, #4]
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f043 0308 	orr.w	r3, r3, #8
 8005ea6:	81a3      	strh	r3, [r4, #12]
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	b94b      	cbnz	r3, 8005ec0 <__swsetup_r+0x7c>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb6:	d003      	beq.n	8005ec0 <__swsetup_r+0x7c>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f857 	bl	8005f6e <__smakebuf_r>
 8005ec0:	89a0      	ldrh	r0, [r4, #12]
 8005ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec6:	f010 0301 	ands.w	r3, r0, #1
 8005eca:	d00a      	beq.n	8005ee2 <__swsetup_r+0x9e>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60a3      	str	r3, [r4, #8]
 8005ed0:	6963      	ldr	r3, [r4, #20]
 8005ed2:	425b      	negs	r3, r3
 8005ed4:	61a3      	str	r3, [r4, #24]
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	b943      	cbnz	r3, 8005eec <__swsetup_r+0xa8>
 8005eda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ede:	d1c4      	bne.n	8005e6a <__swsetup_r+0x26>
 8005ee0:	bd38      	pop	{r3, r4, r5, pc}
 8005ee2:	0781      	lsls	r1, r0, #30
 8005ee4:	bf58      	it	pl
 8005ee6:	6963      	ldrpl	r3, [r4, #20]
 8005ee8:	60a3      	str	r3, [r4, #8]
 8005eea:	e7f4      	b.n	8005ed6 <__swsetup_r+0x92>
 8005eec:	2000      	movs	r0, #0
 8005eee:	e7f7      	b.n	8005ee0 <__swsetup_r+0x9c>
 8005ef0:	20000064 	.word	0x20000064

08005ef4 <_sbrk_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d06      	ldr	r5, [pc, #24]	; (8005f10 <_sbrk_r+0x1c>)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4604      	mov	r4, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	f7fb f8aa 	bl	8001058 <_sbrk>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_sbrk_r+0x1a>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_sbrk_r+0x1a>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	2000057c 	.word	0x2000057c

08005f14 <abort>:
 8005f14:	b508      	push	{r3, lr}
 8005f16:	2006      	movs	r0, #6
 8005f18:	f000 f88e 	bl	8006038 <raise>
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	f7fb f823 	bl	8000f68 <_exit>

08005f22 <__swhatbuf_r>:
 8005f22:	b570      	push	{r4, r5, r6, lr}
 8005f24:	460c      	mov	r4, r1
 8005f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2a:	2900      	cmp	r1, #0
 8005f2c:	b096      	sub	sp, #88	; 0x58
 8005f2e:	4615      	mov	r5, r2
 8005f30:	461e      	mov	r6, r3
 8005f32:	da0d      	bge.n	8005f50 <__swhatbuf_r+0x2e>
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f3a:	f04f 0100 	mov.w	r1, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f44:	2340      	movne	r3, #64	; 0x40
 8005f46:	2000      	movs	r0, #0
 8005f48:	6031      	str	r1, [r6, #0]
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	b016      	add	sp, #88	; 0x58
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	466a      	mov	r2, sp
 8005f52:	f000 f879 	bl	8006048 <_fstat_r>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	dbec      	blt.n	8005f34 <__swhatbuf_r+0x12>
 8005f5a:	9901      	ldr	r1, [sp, #4]
 8005f5c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f60:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f64:	4259      	negs	r1, r3
 8005f66:	4159      	adcs	r1, r3
 8005f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6c:	e7eb      	b.n	8005f46 <__swhatbuf_r+0x24>

08005f6e <__smakebuf_r>:
 8005f6e:	898b      	ldrh	r3, [r1, #12]
 8005f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f72:	079d      	lsls	r5, r3, #30
 8005f74:	4606      	mov	r6, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	d507      	bpl.n	8005f8a <__smakebuf_r+0x1c>
 8005f7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	2301      	movs	r3, #1
 8005f84:	6163      	str	r3, [r4, #20]
 8005f86:	b002      	add	sp, #8
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	ab01      	add	r3, sp, #4
 8005f8c:	466a      	mov	r2, sp
 8005f8e:	f7ff ffc8 	bl	8005f22 <__swhatbuf_r>
 8005f92:	9900      	ldr	r1, [sp, #0]
 8005f94:	4605      	mov	r5, r0
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7ff faf6 	bl	8005588 <_malloc_r>
 8005f9c:	b948      	cbnz	r0, 8005fb2 <__smakebuf_r+0x44>
 8005f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa2:	059a      	lsls	r2, r3, #22
 8005fa4:	d4ef      	bmi.n	8005f86 <__smakebuf_r+0x18>
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	f043 0302 	orr.w	r3, r3, #2
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	e7e3      	b.n	8005f7a <__smakebuf_r+0xc>
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	6020      	str	r0, [r4, #0]
 8005fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fba:	81a3      	strh	r3, [r4, #12]
 8005fbc:	9b00      	ldr	r3, [sp, #0]
 8005fbe:	6163      	str	r3, [r4, #20]
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	6120      	str	r0, [r4, #16]
 8005fc4:	b15b      	cbz	r3, 8005fde <__smakebuf_r+0x70>
 8005fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f000 f84e 	bl	800606c <_isatty_r>
 8005fd0:	b128      	cbz	r0, 8005fde <__smakebuf_r+0x70>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	431d      	orrs	r5, r3
 8005fe2:	81a5      	strh	r5, [r4, #12]
 8005fe4:	e7cf      	b.n	8005f86 <__smakebuf_r+0x18>

08005fe6 <_raise_r>:
 8005fe6:	291f      	cmp	r1, #31
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4604      	mov	r4, r0
 8005fec:	460d      	mov	r5, r1
 8005fee:	d904      	bls.n	8005ffa <_raise_r+0x14>
 8005ff0:	2316      	movs	r3, #22
 8005ff2:	6003      	str	r3, [r0, #0]
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
 8005ffa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005ffc:	b112      	cbz	r2, 8006004 <_raise_r+0x1e>
 8005ffe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006002:	b94b      	cbnz	r3, 8006018 <_raise_r+0x32>
 8006004:	4620      	mov	r0, r4
 8006006:	f000 f853 	bl	80060b0 <_getpid_r>
 800600a:	462a      	mov	r2, r5
 800600c:	4601      	mov	r1, r0
 800600e:	4620      	mov	r0, r4
 8006010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006014:	f000 b83a 	b.w	800608c <_kill_r>
 8006018:	2b01      	cmp	r3, #1
 800601a:	d00a      	beq.n	8006032 <_raise_r+0x4c>
 800601c:	1c59      	adds	r1, r3, #1
 800601e:	d103      	bne.n	8006028 <_raise_r+0x42>
 8006020:	2316      	movs	r3, #22
 8006022:	6003      	str	r3, [r0, #0]
 8006024:	2001      	movs	r0, #1
 8006026:	e7e7      	b.n	8005ff8 <_raise_r+0x12>
 8006028:	2400      	movs	r4, #0
 800602a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800602e:	4628      	mov	r0, r5
 8006030:	4798      	blx	r3
 8006032:	2000      	movs	r0, #0
 8006034:	e7e0      	b.n	8005ff8 <_raise_r+0x12>
	...

08006038 <raise>:
 8006038:	4b02      	ldr	r3, [pc, #8]	; (8006044 <raise+0xc>)
 800603a:	4601      	mov	r1, r0
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f7ff bfd2 	b.w	8005fe6 <_raise_r>
 8006042:	bf00      	nop
 8006044:	20000064 	.word	0x20000064

08006048 <_fstat_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d07      	ldr	r5, [pc, #28]	; (8006068 <_fstat_r+0x20>)
 800604c:	2300      	movs	r3, #0
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	4611      	mov	r1, r2
 8006054:	602b      	str	r3, [r5, #0]
 8006056:	f7fa ffd6 	bl	8001006 <_fstat>
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	d102      	bne.n	8006064 <_fstat_r+0x1c>
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	b103      	cbz	r3, 8006064 <_fstat_r+0x1c>
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	bd38      	pop	{r3, r4, r5, pc}
 8006066:	bf00      	nop
 8006068:	2000057c 	.word	0x2000057c

0800606c <_isatty_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d06      	ldr	r5, [pc, #24]	; (8006088 <_isatty_r+0x1c>)
 8006070:	2300      	movs	r3, #0
 8006072:	4604      	mov	r4, r0
 8006074:	4608      	mov	r0, r1
 8006076:	602b      	str	r3, [r5, #0]
 8006078:	f7fa ffd5 	bl	8001026 <_isatty>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_isatty_r+0x1a>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	b103      	cbz	r3, 8006086 <_isatty_r+0x1a>
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	2000057c 	.word	0x2000057c

0800608c <_kill_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d07      	ldr	r5, [pc, #28]	; (80060ac <_kill_r+0x20>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	f7fa ff55 	bl	8000f48 <_kill>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d102      	bne.n	80060a8 <_kill_r+0x1c>
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	b103      	cbz	r3, 80060a8 <_kill_r+0x1c>
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	bd38      	pop	{r3, r4, r5, pc}
 80060aa:	bf00      	nop
 80060ac:	2000057c 	.word	0x2000057c

080060b0 <_getpid_r>:
 80060b0:	f7fa bf42 	b.w	8000f38 <_getpid>

080060b4 <_init>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr

080060c0 <_fini>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr
